<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[philcrissman.com]]></title>
  <link href="http://philcrissman.com/atom.xml" rel="self"/>
  <link href="http://philcrissman.com/"/>
  <updated>2012-08-30T22:49:06-05:00</updated>
  <id>http://philcrissman.com/</id>
  <author>
    <name><![CDATA[Phil Crissman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTML Boilerplate 4.0]]></title>
    <link href="http://philcrissman.com/2012/08/30/html-boilerplate-4-dot-0/"/>
    <updated>2012-08-30T22:47:00-05:00</updated>
    <id>http://philcrissman.com/2012/08/30/html-boilerplate-4-dot-0</id>
    <content type="html"><![CDATA[<p>HTML5 Boilerplate releases verion 4.0. A great starter template for modern websites.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Touching the stove, broken glass, and other peoples mistakes]]></title>
    <link href="http://philcrissman.com/2012/08/26/touching-the-stove/"/>
    <updated>2012-08-26T21:21:00-05:00</updated>
    <id>http://philcrissman.com/2012/08/26/touching-the-stove</id>
    <content type="html"><![CDATA[<p>We&#8217;re supposed to learn from other peoples mistakes.</p>

<p>At least, this is what we&#8217;re told our whole lives. Those who fail to learn from history, we&#8217;re told, are destined to repeat it (possibly next semester). Eleanor Roosevelt said, &#8220;Learn from the mistakes of others. You can&#8217;t live long enough to make them all yourself.&#8221; Sounds like good advice. Who wants to make mistakes when they can be avoided?</p>

<p>But I distinctly remember having to touch the element on the top of the stove before I learned that I should have listened to my mom.</p>

<p>We have a lot of literature in the field of Software Development which is basically &#8220;learning from the mistakes of others&#8221; wrapped in a bit of ceremony and jargon. Object oriented programming, design patterns, agile practices, XP, Scrum, code smells, refactorings, anti-patterns &#8211; all these things, at their core, are just one or more software developers saying to us: &#8220;Look. I&#8217;ve done this before. I&#8217;ve made mistakes. I&#8217;ve written large, unmaintainable systems, and I think we&#8217;ve found a way to avoid the mistakes we&#8217;ve made before &#8211; listen to this!&#8221;</p>

<p>Thankfully, this shared wisdom usually (eventually) gains a lot of traction. Other developers look into the patterns, the agile practices, the refactorings, and they see some of the pitfalls they themselves have fallen into in the past &#8211; or, may even still be falling into. You start getting wide-spread buy in into these ideas. They spread, they&#8217;re taught, they grow. We write manifestos, or sign them, and start to feel like we&#8217;re making some progress, like we&#8217;re figuring something out.</p>

<p>Somehow, though, once these things start to become entrenched, things get harder for the next generation coming in. The new programmers are handed a group of best practices, but they&#8217;ve never actually made or seen the mistakes that prompted the creation of these best practices in the first place. That makes some of these things seem silly, extraneous, or gratuitous. Why does this class &#8220;need&#8221; to be split into two classes? Cohesion? Who cares, really? Why should those methods be private, anyways? Why does my class need to be encapsulated?</p>

<p>I remember having these questions my first year of computer science; learning Java and (apparently) OOP. Only, we didn&#8217;t really learn OOP at all. We learned to type <code>public static void main(String[] args)</code> a lot. We never learned <em>why</em>. I remember being told that keeping methods private meant that we could hide the implementation from other classes, but I was never told why I would want this.</p>

<p>We usually do wind up seeing the wisdom, eventually, but we need to write some pretty bad code first. And even then, we may only see our mistakes if we&#8217;re lucky enough to recognize our mistake as something we&#8217;ve been warned about in the past, or if we&#8217;re fortunate enough to have a mentor who can point out where we went wrong, and what we might have done to avoid our mistake.</p>

<p>We need to actually make some of these mistakes, in order to learn from them. In order to see how much wisdom there is in some of this classic Software Development literature, we&#8217;re going to have to write some truly awful code.</p>

<p>I wish I could see a way around this; I&#8217;d love to think that we can just warn each successive generation of new software developers about the traps and snares and regions where there be dragonnes, but my experience and my gut tells me that this just isn&#8217;t going to work, compeletely. It&#8217;s good &#8211; I&#8217;m not saying we stop doing this. But I had to make some mistakes before I started to see how much smarts there was in the OOP model; before I started to realize the value of some design patterns. I had to write some bad code in order to see that certain things were, in fact, &#8220;bad&#8221;.</p>

<p>Even worse; some of these mistakes can only be made in large programs or systems. You can&#8217;t necessarily learn these things by writing a program to convert Celsius to Fahrenheit, and back. You need to amass some technical debt in a system which is actually supposed to go into production.</p>

<p>I want there to be another way, but I don&#8217;t think there is.</p>

<p>So, what then? Are we cursed with always having bodies of horrible code, perpetrated by each new generation of software devs as they stumble toward making better sofware?</p>

<p>Well. Probably. But hopefully, maybe, we can minimize it.</p>

<p>Just because we need to make <em>some</em> mistakes, doesn&#8217;t need we need to make <em>all</em> the mistakes over again each time.</p>

<p>If I&#8217;ve been told about patterns, about refactorings, about technical debt &#8211; then hopefully I&#8217;ll have a better chance of recognizing my mistakes the <em>first</em> time I make them (or at least, the second, or third) &#8211; rather than the fifth, or eighth, or tenth time I make them.</p>

<p>Now, that&#8217;s just the thing, about touching the red hot element on the top of the stove: I actually learned <em>two</em> things, there. First, yes, I learned that the stove was actually hot. But second, I learned that when my mom told me not to touch something, she wasn&#8217;t just making up arbitrary rules. Suddenly, it&#8217;s a lot more likely that I&#8217;ll listen to <em>other</em> things that she says. Why? Do I need to be hit by a car before I learn not to play in the street? Thankfully, no. I learned that she was telling the truth about the stove. Even as a five-year-old, this makes me think that hey, maybe mom knows a thing or two. Maybe I shouldn&#8217;t have touched the stove. Maybe I shouldn&#8217;t play in traffic, either.</p>

<p>Hopefully, if we combine reiterating these concepts about OOP, about patterns, about good software design, about Test Driven Development, then when we make mistakes, we not only recognize them faster, but all the rest of the advice we&#8217;ve been ignoring suddenly seems a little more important.</p>

<p>If I realize that my horrible unmaintainable mess of code was caused by violating principle <em>X</em>, maybe I&#8217;ll also take another look at principles <em>Y</em> and <em>Z</em>.</p>

<p>In the first edition of Obie Fernandez&#8217; <em>The Rails Way</em>, one of the technical reviewers made a comment in the section that was discussing the :include option for one of ActiveRecord&#8217;s class methods. Wilson said:</p>

<blockquote><p>Let people learn eager loading by crawling across broken glass, like we did. It builds character!</p></blockquote>

<p>The part of your brain that has always been told to &#8220;learn from the mistakes of others&#8221; rebels at a statement like this. But that little sidebar has stuck in my mind since I first read it, years ago.</p>

<p>Maybe there are some mistakes you <em>have</em> to make yourself.</p>

<p>Then the best thing we can hope for is that we have enough latent sofware development wisdom, somewhere in our heads, which we were taught (but ignored), that we can recognize we&#8217;ve made a mistake that many others have made before. A mistake that could have been avoided.</p>

<p>Maybe, rather than trying to set up new software developers so that they never need to make any mistakes, ever, we should set them up to make as many mistakes as possible, as soon as possible, and give them the tools to identify these mistakes so that they don&#8217;t need to make them again.</p>

<p>Maybe we can start to get better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking about Lift]]></title>
    <link href="http://philcrissman.com/2012/08/03/thinking-about-lift/"/>
    <updated>2012-08-03T08:37:00-05:00</updated>
    <id>http://philcrissman.com/2012/08/03/thinking-about-lift</id>
    <content type="html"><![CDATA[<p><a href="http://philcrissman.com/images/posts/lift-icon.png"><img src="http://philcrissman.com/images/posts/lift-icon.png" width='320' /></a></p>

<p>Starters, <a href="http://lift.do">Lift</a> is a really nice app. It looks and acts great. It has a shiny checkbox that is large and round and easy to tap, and it has pretty graphs that look a little like graphic equalizers from mid-90s stereos with digital interfaces. I can choose a whole list &#8216;habits&#8217; which are then listed and shared, and if I check a habit for the day, then I can see all the other people who recently also did this habit. I can also give these complete strangers who have also seen fit to track their performance in consistent multivitamin consumption &#8220;props&#8221;, and can (in turn) receive &#8220;props&#8221; from them for performance of the same.</p>

<p><a href="http://philcrissman.com/images/posts/lift-checkbox.png"><img src="http://philcrissman.com/images/posts/lift-checkbox.png" width='320' /></a> <a href="http://philcrissman.com/images/posts/lift-graph.png"><img src="http://philcrissman.com/images/posts/lift-graph.png" width='320' /></a></p>

<p>Then I will get a cheery email in my inbox the next day, Clarence459 has given you props for taking a multivitamin.</p>

<p>Thanks, Clarence459! It was rough, but I got it done. Now if only I can continue this arduous habit, I may be a statistical margin of error healthier when I&#8217;m eighty-four, so, I&#8217;m looking forward to that. Though, actually, the kudos are kind of nice. Who doesn&#8217;t like a pat on the back?</p>

<p>There is also the assumption that everyone everywhere will be more than happy to share their personal goals, and in particular share them with everyone else who is trying to accomplish the same thing. So I&#8217;m guessing &#8220;stop looking at porn on the Internet&#8221; will <em>probably</em> not be showing up in the list of habits any time soon.</p>

<p>That&#8217;s fine, though. It&#8217;s about affirmation, about things you want to change. I think most material about goals and habits would suggest that these things should ideally be positive and specific; not &#8220;Stop procrastinating&#8221; or &#8220;blog more&#8221;, but rather; &#8220;Work n hours&#8221;, &#8220;Write 1 blog post&#8221;, etc.</p>

<p><a href="http://philcrissman.com/images/posts/lift-list.png"><img src="http://philcrissman.com/images/posts/lift-list.png" width="320" /></a></p>

<p>This leads to another pitfall; when you first begin assembling your list of habits, you are shown the list of habits that other people have entered. It&#8217;s very easy to just start adding some habits, such as &#8220;Blog more&#8221;, because on seeing it you think, &#8220;Yeah, I actually would like to blog more. I should add this habit.&#8221; Not to get all motivational-speaker-goal-instructional, but that&#8217;s a terribly worded goal. More than what? If I have written one blog post in the last 6 months, then technically writing <em>two</em> blog posts in the next six months will be &#8220;blogging <em>more</em>&#8221;, but somehow I&#8217;m betting that&#8217;s not what we all had in mind when we checked off that habit. Once a habit is on your list, you have to take a bit of thought to remove it and replace it with a better worded habit. I mean, it isn&#8217;t hard, but there&#8217;s this thing you&#8217;d have to do and it&#8217;s really easy just not to bother.</p>

<p>Don&#8217;t misunderstand me, I like the app. I think a good list of positive habits than you can track to see how you <em>really</em> do at what you think you <em>should</em> be doing is a good thing. I can see it helping me reinforce some habits. I can even see the social aspect having some influence, though I&#8217;m not totally sold yet.</p>

<p>If you&#8217;d like to try Lift, visit <a href="http://lift.do">Lift</a>, or hit me up on <a href="http://twitter.com/philcrissman">twitter</a> and I can send you an invite. Even with an invite, I think they are rolling out the Beta in waves, so you might not get an invitation right away, but theoretically you might be higher in the queue.</p>

<p>I guess now I can go check off &#8220;Blog more&#8221; in my list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Not far from the tree]]></title>
    <link href="http://philcrissman.com/2012/07/17/not-far-from-the-tree/"/>
    <updated>2012-07-17T14:08:00-05:00</updated>
    <id>http://philcrissman.com/2012/07/17/not-far-from-the-tree</id>
    <content type="html"><![CDATA[<p><a href="http://philcrissman.com/images/posts/sam-laptop.jpeg"><img src="http://philcrissman.com/images/posts/sam-laptop.jpeg" width="440" /></a></p>

<p>Our son Samuel is almost 17 months old, now. He&#8217;s the coolest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned Selling Pizzas Door to Door]]></title>
    <link href="http://philcrissman.com/2012/06/22/what-i-learned-selling-pizzas-door-to-door/"/>
    <updated>2012-06-22T21:08:00-05:00</updated>
    <id>http://philcrissman.com/2012/06/22/what-i-learned-selling-pizzas-door-to-door</id>
    <content type="html"><![CDATA[<p>In 1991 I had graduated from high school and was well on my way to being an unemployed drug addict. Well on my way, as in, I was an unemployed drug addict.</p>

<p>I&#8217;m not sure if you&#8217;ve ever been a drug addict, but it&#8217;s difficult to buy drugs when you&#8217;re broke. This one day there was one of those ads in the classifieds of some local paper, I can&#8217;t remember the content, but it sounded good so I went to check it out.</p>

<p>It was pretty much a pyramid scheme. Here was the deal:</p>

<p>You sold pizzas, door to door.</p>

<p>What they did was, they had a truck that had some big old pizza warmers in the back, you&#8217;d meet up with the truck every few blocks and get fresh pizzas (assuming you&#8217;d sold any). You had one of those insulated bags that holds five or six pizzas in it, and you&#8217;d go door to door trying to sell them. You can negotiate to your hearts content; sell the pizzas for whatever you want, you just need to pay $3(or something, I forget) for every pizza you no longer have at the end of the day. So, if you sold 6 pizzas for $7 each, or something, you made $4 per pizza, or &#8230; $24. Yeah, I know.</p>

<p>&#8220;That doesn&#8217;t sound like a pyramid scheme,&#8221; you say. Wait.</p>

<p>So, when you join, you join <em>under</em> someone who&#8217;s been there over four months. They are your mentor, they get an extra commission for every pizza you sell.</p>

<p>Wait! There&#8217;s more. After <em>you</em> have been there for 4 months, you can get new people under <em>you</em>, and then you get a kickback for every pizza <em>they</em> sell.</p>

<p>Wait! There&#8217;s more. If a senior dude gets 4 people under him, and all four of those people stay on for 4 months, the company opens a new pizza store, and the dude gets to be the manager of it.</p>

<p>The whole line was, if you stick with this, you&#8217;ll not only make more than $24/day, you&#8217;ll be <em>rich</em>. Stinking crazy million-dollar rich. One of the &#8216;mentors&#8217; told me, quite seriously, that he planned to buy a hockey team when he got to the point of getting his own pizza store.</p>

<p>You were trained to lie to the customer.</p>

<p>They were little lies; but basically, they didn&#8217;t want to try to explain that, yes, we were a pizza place that sold pizzas door to door. So we told people that we were doing a promotion for a new pizza store that had opened up in the area, and to promote the store we were selling pizza door to door. It was all a line of BS, there was no &#8220;new pizza store in the neighborhood&#8221;, just a truck driving around with warm pizzas in the back.</p>

<p>So, enough about crazy business models. I only stuck with this for a few days, before I started to think that the money was not worth pounding the pavement trying to convince people to purchase pizza out of the blue. But in that time, I think I could safely say I learned a few things.</p>

<ol>
<li><p><strong>If it sounds to good to be true, it probably is.</strong> The business model was crazy. Completely insane. Take heed.</p></li>
<li><p><strong>People will buy things if you ask them.</strong> I was pretty introverted, and would <em>never</em> have considered myself a salesman. But after knocking on door after door after door after door, I began to realize that some people would buy a pizza if you asked them to, especially if you made it seem like a good deal and dropped the price a little, just for them. Not everyone, but some folks.</p></li>
<li><p><strong>You can break out of your shell.</strong> I was in a shell, big time. I&#8217;ve always been an introvert, but as late teen, I was still hopelessly quiet, socially awkward, never knowing what to say or how to carry on conversations. After two days of knocking on doors and asking every single stranger I met if they&#8217;d like to order a pizza, I began to notice that: talking became easier. You began to learn that there wasn&#8217;t a huge secret, that you just open your mouth and say things, that no one else knows what to say either, so just say something.  Seriously, at this time among my drug addict friends, my nickname was &#8220;rock&#8221;&#8230; because I never talked. I just sat there and smiled and was really good at rolling joints.</p></li>
<li><p><strong>You don&#8217;t have to keep doing something you don&#8217;t want to do.</strong> I quit that &#8220;job&#8221; after 2 days because it was clearly a terrible business. At least to me. Okay, really the reason I quit was because I&#8217;d stayed out late the night before getting stoned and I wanted to sleep in. It was a long time ago, I feel much better now. Anyways, you need to be careful with this, because after quitting I probably stayed unemployed for, I don&#8217;t know, a couple years. That&#8217;s another story.</p></li>
</ol>


<p>I don&#8217;t know that I learned anything else. But anyways, that&#8217;s the story of how I sold pizzas door to door for a couple days in 1991.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code isn't swayed by logic]]></title>
    <link href="http://philcrissman.com/2012/05/18/code-isnt-swayed-by-logic/"/>
    <updated>2012-05-18T08:32:00-05:00</updated>
    <id>http://philcrissman.com/2012/05/18/code-isnt-swayed-by-logic</id>
    <content type="html"><![CDATA[<p>&#8220;What is it that we want to get out of code? The most important thing is learning. The way I learn is to have a thought, then test it out to see if it is a good thought. Code is the best way I know of to do this. Code isn&#8217;t swayed by the power and logic of rhetoric. Code isn&#8217;t impressed by college degrees or large salaries. Code just sits there, happily doing exactly what you told it to do. If that isn&#8217;t what you thought you told it to do, that&#8217;s your problem.&#8221;
- Kent Beck, <a href="http://www.amazon.com/gp/product/0321278658/ref=as_li_ss_tl?ie=UTF8&amp;tag=idepermin-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321278658">Extreme Programming Explained</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Read Web Analytics]]></title>
    <link href="http://philcrissman.com/2011/10/10/how-to-read-web-analytics/"/>
    <updated>2011-10-10T00:00:00-05:00</updated>
    <id>http://philcrissman.com/2011/10/10/how-to-read-web-analytics</id>
    <content type="html"><![CDATA[<p>The CEO of BigCorp just got the company&#8217;s web analytics report and is
trying to make sense of it. He calls in his lead developer and asks him
what the analytics report says.</p>

<p>&#8220;We&#8217;re doing great,&#8221; says the developer. &#8220;Look at all these hits and
page views. We&#8217;re having no scaling issues. The report says everything
is going well.&#8221;</p>

<p>Happy but not satisfied, the CEO calls in his head of marketing and asks
her what the analytics report says.</p>

<p>&#8220;Not so good,&#8221; says the head of marketing. &#8220;We have a lot of page views,
but no one is sticking around very long or drilling deeper into the
site. We need to generate more content and revamp our web design.&#8221;</p>

<p>A little nervous now, the CEO also calls in the SEO consultant who&#8217;s
been working with the company, and asks the consultant what the
analytics report says.</p>

<p>The SEO consultant spends a few minutes reading the report. After
looking around to make sure the door is closed and no one is listening,
the SEO consultant leans forward and asks, &#8220;What would you like it to
say?&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Too Clever To Debug]]></title>
    <link href="http://philcrissman.com/2011/07/06/too-clever-to-debug/"/>
    <updated>2011-07-06T00:00:00-05:00</updated>
    <id>http://philcrissman.com/2011/07/06/too-clever-to-debug</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/themadlolscientist/2538226772/sizes/z/in/photostream/"><img src="http://philcrissman.com/images/posts/math_fail.jpg" width="440" /></a></p>

<blockquote><p>&#8220;Debugging is twice as hard as writing the code in the first place.  Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.&#8221;
&#8211;Brian Kernighan</p></blockquote>

<p>This sounds nice, and can (maybe) be good advice in some cases. But it can&#8217;t possibly be true; in fact, it rests on a bit of a logically flawed syllogism:</p>

<ul>
<li>A: Debugging is twice as hard as writing code.</li>
<li>B: Writing code is hard.</li>
<li>C: Ergo, if you write the hardest code you possibly can, you are not smart enough to debug your own code.</li>
</ul>


<p>The problem sits in both in assumption A, and in an unspoken assumption about what it means for something to be &#8220;hard&#8221;.</p>

<p>Regarding A, there&#8217;s no backing behind this &#8220;debugging is twice as hard&#8221; assumption; it&#8217;s simply stated. Regarding the idea of relative <em>hardness</em> of a problem; the conclusion to the above syllogism assumes that there is a ceiling of &#8220;hardness&#8221; which you are capable of comprehending. If your code is at that ceiling, it argues, then debugging it will be impossible for you, because debugging it will be harder than writing it, which was the limit of how &#8220;hard&#8221; a problem you can solve. I reality, I don&#8217;t believe this to be the case; something may be &#8220;harder&#8221; than anything I&#8217;ve yet worked through, but that only means it might take me more time and more effort to understand it; not that I cannot possibly comprehend it.</p>

<p>Now, we all know that bugs can be hard to find and fix, so we tend to simply accept, even encourage, statements like this. But are they really true?</p>

<p>Think back to your Algebra, Trig, or Calculus classes; if you took these in the same sort of classes, with the same sort of textbooks, that I did, you were routinely given assignments whose answers were in the back of the book. The idea was, you would work through the problems, and then check your answer to see how you did. If you had an incorrect answer, then you would look at the steps you took to solve the equation until you found the point at which you had made a mistake.</p>

<p>This is, to my mind, completely analogous to programming. You write a piece of code to do a certain thing; then you either write a test, or you simply run it with some sample input, to ensure that it does what you think it does. If you test it thoroughly (note: this <em>is</em> actually hard, and is the reason that bugs often slip into production code), then you will either:</p>

<ul>
<li>a) discover that your code successfully does what you intended, or</li>
<li>b) discover a case where your code returns an incorrect result; in other words, a bug, or a place where you made a mistake.</li>
</ul>


<p>In case b, you&#8217;ll do the same thing you used to do with your math homework; you&#8217;ll start going through it until you find the place where you made a mistake, and you&#8217;ll fix it, and (ideally), you&#8217;ll write a test that mocks this scenario, and be satisfied that this bug is squashed.</p>

<p>Debugging is indeed hard; there are several things which make it harder than just solving a math equation. For one thing, in your programs, you may not have total control over what inputs (if applicable) are sent to your function. You might intend that factorial(num) always receives an integer as its argument. What if some malevolent person calls it and sends a String? An octal value? An object? An array? Do you care? Does your function try to detect this and either raise an error or return false? Is returning false or nil <em>really</em> what you want to do in that case? What if a number is sent that is larger than MAX_INT? Does it fail silently, interpret the number as whatever your programming language sees it, raise an error&#8230; ? In comparison, you can pretty much ensure that x, whatever it may be, in your Algebra exercise, is a number. It&#8217;s probably a Real number. And you can probably find it without too much trouble.</p>

<p>Another thing that I like about this example is that it basically shows that the process of learning math is essentially the process of locating and fixing your mistakes. The instructor, the course, <em>assumes</em> that you will not always get the correct answer. That&#8217;s the whole reason there are answers in the back of the book, and that you are assigned those questions which actually have answers. The basic premise is that you will get some questions wrong, and that through the process of realizing you are wrong and going back to find where you are wrong (and fixing it), you are doing something which we call <em>learning math</em>.</p>

<p>Programming, I&#8217;d argue, works the same way. You learn to program, <em>not</em> by consistently writing correct programs, but by writing bugs. Then, once you realize you have written a bug, you locate it, attempt to understand <em>why</em> it&#8217;s a bug, why you erroneously believed that it would work, what you should do instead, and how to do that thing.</p>

<p>We call this &#8220;learning to program&#8221;.</p>

<p>If you are not smart enough to find and fix bugs, you are actually not smart enough to learn to program. The good news is, you <em>are</em> smart enough to find and fix bugs, and you are smart enough to program.</p>

<p>The logical error comes in the assumption that <em>writing the hardest/most complex/most clever code that you can</em> is the theoretical limit of your intelligence, and that, since &#8220;debugging is harder than coding&#8221;, you are not clever enough to see the bugs in your own code.</p>

<p>That&#8217;s similar to saying that if you are doing the hardest Calculus question you are currently capable (or barely capable) of doing, if you make a mistake, you are unable to find and fix that mistake, because finding the mistake is (somehow) harder than solving the problem.</p>

<p>Put that way, it seems absurd. Of course finding your mistake isn&#8217;t &#8220;harder&#8221; than solving the problem; finding the mistake is <em>part of</em> the problem. In fact, since generally every step in solving an equation or working out an integral or a derivative involves smaller steps based on things you have <em>already learned and mastered</em> (again&#8230; theoretically), you almost definitely <em>can</em>, for sure, find your error if you go through each of your steps carefully, thinking about what you are doing and why you&#8217;re doing it.</p>

<p>Sure, finding bugs is hard. That&#8217;s because if it was easy, you wouldn&#8217;t have written the bug in the first place. The bug represents that place in your algebra homework where you&#8217;d make that tiny arithmetic error, or forget to flip the sign when a number was/wasn&#8217;t negative, or where you&#8217;d mis-apply some other mathematical rule. Spotting where you made that error is simply the process of learning math.</p>

<p>That&#8217;s not the same as it being <em>too hard</em> for you to accomplish. I would guess (though I can&#8217;t <em>know</em> this) that Mr. Kernighan intended his little aphorism to be taken with a rather liberal grain of salt, that it was actually a bit of the subtle humor engineers and geeks are so fond of. The fact that we&#8217;ve taken it at face value and treated it as though it were actually true is <em>our</em> fault, not Brian Kernighan&#8217;s.</p>

<p>Now, the actual quote (according to <a href="http://en.wikiquote.org/wiki/Brian_Kernighan">wikiquote</a>) seems to be from Elements of Programming Style, and goes:</p>

<blockquote><p>&#8220;Everyone knows that debugging is twice as hard as writing a program in the first place. So if you&#8217;re as clever as you can be when you write it, how will you ever debug it?&#8221;</p></blockquote>

<p>This still has that logical leap embedded in it (&#8221;<em>Everyone knows</em> that debugging is twice as hard&#8221;, etc.), but it does have a good, valid point, <em>depending on how you define &#8220;as clever as you can be&#8221;</em>. (If <em>being clever</em> is actually <em>being smart</em>, then &#8220;as clever as you can be&#8221; would be to only write code which you are capable of debugging&#8230; but I digress.)</p>

<p>What I think this really is <em>intended</em> to mean is: if you write code <em>that you do not completely understand</em>, you will (potentially) introduce bugs <em>which you are not capable of identifying or resolving</em>.</p>

<p>The key is code that <em>you don&#8217;t understand</em>. The reason you won&#8217;t be able to find the bugs is that you don&#8217;t understand what your code is doing in the first place. If that&#8217;s true, then yes, of course you have written un-debuggable software (for <em>you</em>, at least; someone who understands what you wrote can certainly find your bugs). The other side of this coin is that, if you take the time and effort to understand the code that you wrote, you <em>can</em> find the bugs. And you can remove them.</p>

<p>This is called <em>programming</em>. You&#8217;ve probably been doing it for a long time. The fact that we&#8217;re still creating and fixing bugs only means that we haven&#8217;t finished learning to do it yet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Current Desktop]]></title>
    <link href="http://philcrissman.com/2011/03/10/current-desktop/"/>
    <updated>2011-03-10T00:00:00-06:00</updated>
    <id>http://philcrissman.com/2011/03/10/current-desktop</id>
    <content type="html"><![CDATA[<p><a href="http://philcrissman.com/images/posts/theDesktop3-10-11.png"><img src="http://philcrissman.com/images/posts/theDesktop3-10-11-sm.png" width="440" /></a></p>

<p>I&#8217;m a sucker for a nice desktop. Currently using <a href="http://mutablecode.com/apps/nerdtool">NerdTool</a> (thanks, <a href="http://www.leancrew.com/all-this/">drdrang</a> and <a href="http://brettterpstra.com/">Brett Terpstra</a>) and <a href="http://wallsaverapp.com/">WallSaver</a>.</p>

<p>UPDATE:</p>

<p>Forgot to detail, just for the sake of completeness, the items in the menubar. From left to right, we have:</p>

<p><a href="http://peepcode.com/products/peepopen">PeepOpen</a>: Great plugin for TextMate, MacVim, Emacs, Aquamacs, Coda or XCode for finding files. It&#8217;s really good. One of my favorite features is that it automatically orders by the date you late modified something; so if you look in a rails app for a file named index (of which you probably have dozens), the first one listed will be the last one you edited, which is often exactly the one I want.</p>

<p><a href="https://www.dropbox.com/">Dropbox</a>: Files, online. Wait, am I supposed to say &#8220;in the cloud&#8221; now? Anyway. The truth is out there.</p>

<p><a href="http://toolbar.google.com/gmail-helper/notifier_mac.html">Google Calendar/Mail Notifiers</a>: If you want to be notified of that sort of thing.</p>

<p><a href="http://www.alfredapp.com/">Alfred</a>: Instead of Spotlight. It has a few extra features (empty your trash bin with a few keystrokes), I find I like it a lot.</p>

<p><a href="http://evernote.com/">Evernote</a>: I&#8217;m still not sold on this app, but I&#8217;m giving it a try.</p>

<p><a href="http://stereopsis.com/flux/">Flux</a>: You&#8217;ll just have to read the description on the site&#8230;</p>

<p><a href="http://littleipsum.com/">Littleipsum</a>: Lorem ipsum text generator. I wish the UI was better, but it&#8217;s ok.</p>

<p><a href="http://www.lightheadsw.com/caffeine/">Caffeine</a>: Keeps your mac awake, of course. Nice for presentations.</p>

<p><a href="http://www.ragingmenace.com/software/menumeters/">MenuMeters</a>: So you don&#8217;t <em>need</em> to keep activity monitor open all the time. I mean, you will anyways, but you don&#8217;t <em>need</em> to.</p>

<p>The rest are just standard Mac OS stuff: Spaces, Displays, TimeMachine(not used, using <a href="http://www.crashplan.com/">Crashplan</a>), Bluetooth, WiFi, Sound, Keyboard-switcher (for when I switch back to Dvorak&#8230; eventually), Battery, Date, Spotlight, phew.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test First As A Productivity Hack]]></title>
    <link href="http://philcrissman.com/2011/02/21/test-first-as-a-productivity-hack/"/>
    <updated>2011-02-21T00:00:00-06:00</updated>
    <id>http://philcrissman.com/2011/02/21/test-first-as-a-productivity-hack</id>
    <content type="html"><![CDATA[<p><a href="http://philcrissman.com/images/posts/focus.jpg"><img src="http://philcrissman.com/images/posts/focus.jpg" width="440" /></a></p>

<p>If you&#8217;re like me, and live primarily online, you have countless distractions in the form of blogs, news sites, photo sites, chat applications, twitter/facebook, web comics, etc. It&#8217;s really easy to sit down at your computer, and if you&#8217;re not focused, simply call up <a href="http://thisisnthappiness.com">TIH</a> or <a href="http://news.ycombinator.com">HN</a> or <a href="http://bestofwikipedia.tumblr.com">bestofwikipedia</a> and soon find the first hour of your day has been completely sucked up just <em>looking at stuff</em>.</p>

<p>Well, if you&#8217;re a contractor or freelancer, that may not be how you wanted to spend the first hour of your day. You just lost an hour of billable time; do that every day and you&#8217;re cheating yourself out of a lot of hours, especially if (guilty look) you&#8217;re prone to a similar web-surfing session after returning from lunch.</p>

<p>Something I&#8217;ve started doing, that I&#8217;ve found to be a great help in avoiding losing focus like this, is to sit down and make the <em>my very first task</em> to be writing a test for the app that I&#8217;m currently working on.</p>

<p>So, in this context, I&#8217;m not talking about &#8220;test first&#8221; in the TDD (Test Driven Development) sense, although I do practice that. I mean &#8220;test first&#8221; literally, as, <em>when my seat hits the chair, and my fingers touch the keyboard, write a test</em>.</p>

<p>This accomplishes a few different things.</p>

<ol>
<li>An immediate thing to focus on. Part of the reason I get distracted by the web is that I may not have an <em>immediate</em> action to start on. Having an immediate, easy to start, first action makes a world of difference.</li>
<li>It gets me in the &#8220;work&#8221; mindset and flow. It doesn&#8217;t matter what the test is. It might be as simple as a throw-away &#8220;when I go to this page, I should see the correct page title&#8221; test &#8211; the point isn&#8217;t that this test <em>needs</em> to be written for the health of the application&#8217;s test suite; it&#8217;s simply a hack to get you into work-mode. Once I look at the code, add a test, make sure it runs, by then I&#8217;ve only spent about 2-4 minutes, but I&#8217;ve avoided getting side-tracked, and I&#8217;m already into the codebase, so it&#8217;s very natural to look at what needs to be done next, and start doing it.</li>
<li>Hey, if I choose wisely, some of this uber-simple tests I&#8217;m adding as a first action may actually be useful. If a test is <em>truly</em> trivial, you probably just want to delete it; but chances are you can find <em>something</em> simple to test that actually does need to be true in the finished app; all the better. You <em>have</em> actually improved your test suite, while simultaneously avoiding that &#8220;morning distraction&#8221; time, and getting yourself into the flow of <em>getting things done</em>.</li>
</ol>


<p>Your mileage may vary. But it&#8217;s been working for me. Adding something like the <a href="http://www.pomodorotechnique.com/">Pomodoro technique</a> to this means that I&#8217;ll still get a chance to catch up on my blogs/etc during the day, but without the trap of spending my first hour surfing mindlessly.</p>

<p>What are your &#8220;get back to work&#8221; hacks?</p>

<p><span style="font-size: 0.8em; color: #666;">
Photo credit: <a href="http://www.flickr.com/photos/ihtatho/627226315/sizes/m/in/photostream/">flickr</a>
</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UJS in Rails 3 Slides]]></title>
    <link href="http://philcrissman.com/2011/02/01/ujs-in-rails-3-slides/"/>
    <updated>2011-02-01T00:00:00-06:00</updated>
    <id>http://philcrissman.com/2011/02/01/ujs-in-rails-3-slides</id>
    <content type="html"><![CDATA[<p>So, here&#8217;s those slides from the other night.</p>

<div style="width:425px" id="__ss_6775992"><strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/philcrissman/ujs-in-rails-3-6775992" title="UJS in Rails 3">UJS in Rails 3</a></strong><object id="__sse6775992" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=ujs-110201093325-phpapp02&stripped_title=ujs-in-rails-3-6775992&userName=philcrissman" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed name="__sse6775992" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=ujs-110201093325-phpapp02&stripped_title=ujs-in-rails-3-6775992&userName=philcrissman" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed></object><div style="padding:5px 0 12px">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/philcrissman">philcrissman</a>.</div></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UJS in Rails 3 tonight at RUM]]></title>
    <link href="http://philcrissman.com/2011/01/31/ujs-in-rails-3-tonight-at-rum/"/>
    <updated>2011-01-31T00:00:00-06:00</updated>
    <id>http://philcrissman.com/2011/01/31/ujs-in-rails-3-tonight-at-rum</id>
    <content type="html"><![CDATA[<p>UJS in Rails 3, tonight at RUM</p>

<p>I&#8217;ll be speaking tonight on UJS and Rails 3 at <a href="http://ruby.mn/">RUM</a>. Slides will be posted somewhere later this week, and I may follow up with a post that summarizes the content, if the slides don&#8217;t seem complete enough to cover the topic on their own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[looselyjoined.net]]></title>
    <link href="http://philcrissman.com/2011/01/14/looselyjoinednet/"/>
    <updated>2011-01-14T00:00:00-06:00</updated>
    <id>http://philcrissman.com/2011/01/14/looselyjoinednet</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been piling a lot of links, images, and whatnot up on a <a href="http://posterous.com">posterous.com</a> website: see <a href="http://looselyjoined.net">looselyjoined.net</a>. Enjoy, if you are so inclined.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's roll]]></title>
    <link href="http://philcrissman.com/2010/11/11/lets-roll/"/>
    <updated>2010-11-11T00:00:00-06:00</updated>
    <id>http://philcrissman.com/2010/11/11/lets-roll</id>
    <content type="html"><![CDATA[<p><a href="http://philcrissman.com/images/posts/d20-iwojima.jpg"><img src="http://philcrissman.com/images/posts/d20-iwojima.jpg" width="440" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anti-Gravity]]></title>
    <link href="http://philcrissman.com/2010/11/09/anti-gravity/"/>
    <updated>2010-11-09T00:00:00-06:00</updated>
    <id>http://philcrissman.com/2010/11/09/anti-gravity</id>
    <content type="html"><![CDATA[<p><img src="http://philcrissman.com/images/posts/antigravbook.jpg" alt="Anti-Gravity" /></p>

<p><a href="http://comixed.memebase.com/2010/10/26/4-koma-comic-strip-a-real-page-turner/">link</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Read Error Messages for Ruby on Rails]]></title>
    <link href="http://philcrissman.com/2010/11/08/how-to-read-error-messages-for-ruby-on-rails/"/>
    <updated>2010-11-08T00:00:00-06:00</updated>
    <id>http://philcrissman.com/2010/11/08/how-to-read-error-messages-for-ruby-on-rails</id>
    <content type="html"><![CDATA[<p><img src="http://philcrissman.com/images/posts/stack.jpg" alt="stack" /></p>

<p>Off and on (more off than on, recently) I lurk in the #rubyonrails IRC channel and try to be helpful. It&#8217;s sad to say, but it&#8217;s really common that people have questions &#8211; something isn&#8217;t working &#8211; and when they post the error message that they&#8217;re getting, their problem (and its implicit solution) is written in plain English in the first few lines of the error message. Not every time of course, but more often than not, error messages are trying to tell you something, and you should listen to what they&#8217;re telling you.</p>

<p>The greatest possible help you can give someone who is having this sort of problem is to advise them to read the error messages and try to figure it out. It sounds a little harsh, shades of the RTFM-type of &#8220;help&#8221; that some communities are known for. But in the long run, it&#8217;s going to help the new developer a lot more to be able to read an error message than to simply ask you to read it for them.</p>

<p>That said, here&#8217;s some things to look for in some fairly common Ruby and/or Rails error messages:</p>

<h3>These are not the gems you&#8217;re looking for.</h3>

<p><code>[gem] not found</code>, not present, etc. : so, you think you have installed a gem or plugin. Make sure.</p>

<h3>You can&#8217;t <em>do</em> that with <em>this</em></h3>

<p><code>no method error 'something' on SomeClass.</code> You&#8217;re trying to call a method on an object which does not actually have that method. Yes, I know, you think it does, but if it did, then your code would be working. So what is happening is that either you have a different object than you expected to have, or some Module which provides the method has not been included, or (if it&#8217;s an ActiveRecord object) the column or association you&#8217;re assuming is there is not actually there. Also, you may have spelled the method wrong, or it may be that the method you think is there doesn&#8217;t actually exist.</p>

<p>A variation of this is when you have <code>no method 'whatever' for NilClass</code>&#8230; the issue here is that the object you&#8217;re looking for (almost certainly an ActiveRecord object) was not found; there was no record with a given id in the scope you were searching. So nil is what you were calling the method on, and NilClass has surprisingly few methods to call its own.</p>

<p>A slight variation, somewhat related to the above case, is the error that you&#8217;re attempting to call the id for 4 which is nil, or some such confusing warning. Well, again, your object is nil. The id of nil is 4. Open up irb and check: the id (object_id, really) for nil is 4.</p>

<p>Other things that can cause a nil error in a controller action and/or view are: not actually setting a value for an instance variable, forgetting to pass a local variable to a partial, and things of that nature.</p>

<p>I thought I would be writing more, but most errors I can think of off the top of my head fall into one of these categories: a gem/library/plugin isn&#8217;t present, a no-method-error, and/or having an object be nil when you really expected it to be something else.</p>

<p>Bottom line:</p>

<p>Read the error messages.</p>

<p>Read the error messages.</p>

<p>Read the error messages.</p>

<h3>But the error message isn&#8217;t helping!</h3>

<p>Yeah, sometimes you just don&#8217;t know quite what the issue is. Or you can see what it is, but you aren&#8217;t sure <em>where</em> exactly it&#8217;s coming from. That&#8217;s where the stack trace comes it.</p>

<p>Most error messages are accompanied by a stack trace which lists the method calls that led to the error that occurred. By going back down the stack trace, you can generally find the exact file, the exact method, and even the exact line number, which is ultimately responsible for causing the error.</p>

<p>In Rails, most often (maybe not every time, but most often) the error will be in a file that you wrote, not one of the rails files. When I need to look through a stack trace for an error, I generally just start scanning down the list, skipping over any/all files that belong to a Rails core gem or library until I get to something in app/, config/, or lib/; basically, until I get to something that <em>I</em> wrote. Then I look for the line number, and most likely there I&#8217;ll find the reason the error was called.</p>

<h3>I still can&#8217;t figure out what&#8217;s wrong.</h3>

<p>Sometimes you just have to think about it for awhile. The key is, you have found the reason the error is being raised. You might <em>think</em> that your code is correct, but if an error is being raised, something isn&#8217;t right. It may be an assumption you&#8217;re using that isn&#8217;t really true, a typo, a logical error, a syntax error, but <em>somewhere</em>, there is a problem. If you get to your line of code which is responsible for the error and you still don&#8217;t know why it&#8217;s failing, (and a google search for the error and/or situation reveals nothing new), that might be a good time to ask for advice on IRC. You can also just start asking yourself: okay, I know this line of code is causing an error. Why would it be failing? What assumptions is this line of code making which may have turned out not be true? Would any of those assumptions cause this error?</p>

<p>&#8230; and so forth.</p>

<p>But again:</p>

<ul>
<li><p>Read the error message.</p></li>
<li><p>Read the stack trace.</p></li>
<li><p>Read your code.</p></li>
<li><p>Think about it.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Does Not Simply Walk Into Mordor]]></title>
    <link href="http://philcrissman.com/2010/10/22/one-does-not-simply-walk-into-mordor/"/>
    <updated>2010-10-22T00:00:00-05:00</updated>
    <id>http://philcrissman.com/2010/10/22/one-does-not-simply-walk-into-mordor</id>
    <content type="html"><![CDATA[<p><img src="http://philcrissman.com/images/posts/walksintomordor.jpg" width="440" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[By Land and By Sea and By Reference]]></title>
    <link href="http://philcrissman.com/2010/10/06/by-land-and-by-sea-and-by-reference/"/>
    <updated>2010-10-06T00:00:00-05:00</updated>
    <id>http://philcrissman.com/2010/10/06/by-land-and-by-sea-and-by-reference</id>
    <content type="html"><![CDATA[<p><img src="http://philcrissman.com/images/posts/travel_land_sea_air.jpg" width="440" />
<span style="font-size:0.8em"><a href="http://www.flickr.com/photos/hitchster/4118220915/">Photo source</a></span></p>

<p>I recently attempted to fit the quicksort algorithm into under 140 characters of Ruby. It looks like:</p>

<pre>
<code class="ruby">

def q(s);t=s.dup;t.size<=1 ? t :(p=t[i=t.size/2];t.delete_at(i);x,y=[],[];t.each{|e|e&lt;p ? x&lt;&lt;e : y&lt;&lt;e};n=q(x);m=q(y);n+[p]+m)end

</code>
</pre>


<p></p>

<p>That&#8217;s a little hard to read, so here&#8217;s the first working version I wrote before attempting to squeeze it into twitterable form:</p>

<pre>
<code class="ruby">
def quicksort(sequence)
  tmp = sequence.clone
  if tmp.count <= 1 
    return tmp
  else
    pivot_index = (tmp.count / 2)
    pivot = tmp[pivot_index]
    # pull the pivot out of the array.
    tmp.delete_at(pivot_index)
    
    # create 2 sub-sequences, one < pivot, one >= pivot
    sub_sequence_a = []
    sub_sequence_b = []
    tmp.each do |element|
      if element < pivot
        sub_sequence_a << element
      elsif element >= pivot
        sub_sequence_b << element
      end
    end

    # quicksort sub-sequence 1
    new_sub_sequence_a = quicksort(sub_sequence_a)
    
    # quicksort sub-sequence 2
    new_sub_sequence_b = quicksort(sub_sequence_b)
    
    # return sub1 plus pivot plus sub2
    new_sub_sequence_a + [pivot] + new_sub_sequence_b
  end
end
</code>
</pre>


<p>A key step in this implementation is pulling the pivot <em>out</em> of the array (see around line 9). In my first naive attempt at quicksort I just deleted the pivot right from <code>sequence</code>, the array object that is passed in to be sorted.</p>

<p>Anyone see the problem there?</p>

<p>At first, I sure didn&#8217;t. After all, I put the pivot back in the return value, right? (Second to last line.)</p>

<p>That does indeed ensure that the <em>returned</em>, <em>sorted</em> array has all the same elements as the original array. But the original array that I passed in would now have one less item. It would (did) lose an element every time I&#8217;d run my naive (read: incorrect) implementation of quicksort on it.</p>

<h3>WTF?</h3>


<p>Enter passing objects by reference. In Ruby, everything is passed by reference.(1) It can be easy to forget this, though, especially if you&#8217;re used to changing objects with the assignment (&#8220;=&#8221;) operator.</p>

<blockquote style="font-size:0.85em">
1 Just in case that&#8217;s not a familiar phrase, &#8220;by reference&#8221; refers to the idea that a reference to the <strong>actual object</strong> (like a pointer, if you will) is being passed, not just a copy of the object, or just the value of the object (which is called passing &#8220;by value&#8221;). (And no, by &#8220;pointer&#8221; I&#8217;m not talking about pointers in C/C++, I&#8217;m just trying to say that a reference <strong>refers to</strong> or in a sense, <strong>points to</strong>, the actual original object.)
</blockquote>


<p>For example:</p>

<pre>
<code class="ruby">
def reassign(obj)
  obj = "Not the same!"
end

#irb
> greeting = "Hello!"
=> "Hello!"
> reassign(greeting)
=> "Not the same!"
> puts greeting
Hello!
=> nil
</code>
</pre>


<p>So, assignment inside a method doesn&#8217;t change our object. Ruby must not <em>really</em> be passing a referece, right? Wrong, it sure is.</p>

<pre>
<code class="ruby">
def shiftit(obj)
  obj.shift
end

#irb
> h = {:foo => "bar", :bar => "baz", :baz => "qux"}
=> {:foo=>"bar",:bar =>"baz",:baz=>"qux"}
> a = [1,2,3,4,5,6]
=> [1,2,3,4,5,6]
> shiftit(h)
=> {:bar =>"baz",:baz=>"qux"}
> shiftit(a)
=> [2,3,4,5,6]
> # BUT WAIT
> h
=> {:bar =>"baz",:baz=>"qux"}
> a
=> [2,3,4,5,6]
</code>
</pre>


<p>Huh. How about that. Our original objects were changed when they were modified inside the method.</p>

<p>You&#8217;ll find that any method of modifying an object inside another method with actually change (even delete, if you go that far) the original object that you passed in. Ruby quite definitely, always, passed objects by reference.</p>

<h3>Then How come <em>assignment</em> in a method doesn&#8217;t change an object?</h3>


<p>That&#8217;s a good question. I was stumped on this one myself for a bit. The answer comes down to the idea of <em>bindings</em> and <em>scope</em>. When I tell Ruby that <code>foo = "bar"</code>, Ruby binds the local variable named <em>foo</em> to a String object, &#8220;bar&#8221;. foo is a String object, and when I pass it to my <code>reassign</code> method, I am passing a reference to the real object, <code>foo</code>.</p>

<p>However, inside the method, I&#8217;m in a new scope. When I type <code>foo = "Some new value"</code> inside the method scope, trying to reassign <code>foo</code>, Ruby sees that I&#8217;m binding foo to a new value; but from inside method scope, Ruby is not going to let me change the binding from another scope. So instead, Ruby figures that I want a local variable that is <em>also</em> named <code>foo</code>, inside my method scope, and it assigns my new value to the local <code>foo</code>, not the original <code>foo</code>.</p>

<p>I could alter it, still: if I changed the <code>reassign</code> method so that it did <code>obj.replace("Some new value!")</code> inside the method body, the original object would be changed, just like <code>shiftit</code> did to the array and the hash.</p>

<h3>I think I&#8217;m a clone, now</h3>


<p>Back to the quicksort implementation I started with: the way to get around this is to use .clone or .dup to get a <em>copy</em> of the object. That way you aren&#8217;t actually modifying the original object. Even when I realized this was happening, I still made the mistake of just doing <code>tmp = sequence</code> on my first try. No good; same exact problem. <code>tmp</code> is now just a reference straight to <code>sequence</code>, so altering <code>tmp</code> modifies <code>sequence</code> as well. Need to use <code>tmp = sequence.clone</code>, or something like it.</p>

<h3>That&#8217;s all I have to say about that</h3>


<p>Say it with me now: &#8220;Ruby passes objects by reference. <em>Ruby passes objects by reference.</em> Every time. <em>All the time.</em> <strong>By reference.</strong>&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun With The Major Scale]]></title>
    <link href="http://philcrissman.com/2010/08/11/fun-with-the-major-scale/"/>
    <updated>2010-08-11T00:00:00-05:00</updated>
    <id>http://philcrissman.com/2010/08/11/fun-with-the-major-scale</id>
    <content type="html"><![CDATA[<p>Got to chatting with Nate <a href="http://twitter.com/fowlduck">(@fowlduck)</a> about musical notation last night. He was pointing out that bits of the notation seem arbitrary and probably archaic, likening it to legacy code of a sort. For example, why no whole tone between B and C, E and F? This post is NOT meant to be a defense of music notation, a &#8220;setting straight&#8221; of anything, or even a definitive description of musical theory (at which I&#8217;m a rank amateur). It just got me thinking about the major scale and the circle of fourths &amp; fifths, which led to some playing around on the command line, which led to this. Enjoy.</p>

<p>The thing that makes it seem so strange is, at least in part, the major scale. The octave consists of twelve semi-tones, in which the major scale is set in this pattern: whole tone, whole tone, semitone, whole tone, whole tone, whole tone, whole tone, semi-tone. Like so:</p>

<pre>
  1   2   3   4   5   6   7   8   9   10  11  12  13
| C |   | D |   | E | F |   | G |   | A |   | B | C | ... (etc) 
</pre>


<p>The next root note (13th semi-tone, above) is only a semi-tone off from the last note of the scale. And so on. The semi-tone before or after any given note is a flat or a sharp respectively, giving rise to the B# == C, Cb == B, E# == F, Fb == E identities. So, let&#8217;s just accept the scale as a given; that this pattern of whole tones and semi-tones sounds pleasing to the ear.</p>

<p>So why is it C that has all natural notes (no sharps or flats)? Good question. That part, to me at least, does seem arbitrary, but effectively it doesn&#8217;t matter. Given the above system, the major scale in one key and one key only will have no sharps or flats. But still, why structure the notes this way? It still doesn&#8217;t necessarily seem to make sense.</p>

<p>There are a few reasons. For one, we want to be able to express every scale by naming off the notes, and we&#8217;d like each note to be a different letter. So we need 7 letters.</p>

<p>Where it gets really interesting is the circle of fourths and fifths.</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/33/Circle_of_fifths_deluxe_4.svg/400px-Circle_of_fifths_deluxe_4.svg.png" /></p>

<p>So, if you go around clockwise, you&#8217;re counting by fifths (G is the fifth note of the C major scale, D is the fifth note of the G major scale, etc) and if you go around counter-clockwise you&#8217;re counting by fourths (F is the fourth note of C, Bb is the fourth note of F, etc). If you go around clockwise, each scale has one additional sharped note until you get to 180 degrees around, then it has n-1 flat notes, and loses one flat each fifth till you get back to C (no sharps or flats); vis versa the other direction. This is actually really cool; each scale, in addition to being unique in that, well, it has a different root note, is unique in that it is the only scale to have its specific number of sharps or flats. If a scale has 3 sharps, it&#8217;s A. Period. There isn&#8217;t another choice. Neat!</p>

<p>So for fun, we can explore the circle of fifths in the command line. First lets set it up:</p>

<pre>
<code class="ruby">
> circle = (0..11).map{|n| n*7%12 }
 => [0, 7, 2, 9, 4, 11, 6, 1, 8, 3, 10, 5] 
</code>
</pre>


<p>Well. That doesn&#8217;t mean a whole lot. How can we map it to notes? Let&#8217;s just construct a reference array really quick. (I&#8217;m making it an instance variable so I can use it in a method later; this was all done in irb.)</p>

<pre>
<code class="ruby">
> @notes = ["C", "C#/Db", "D", "D#/Eb", "E", "E#/F", "F#/Gb", "G", "G#/Ab", "A", "A#/Bb", "B/Cb"]
 => ["C", "C#/Db", "D", "D#/Eb", "E", "E#/F", "F#/Gb", "G", "G#/Ab", "A", "A#/Bb", "B/Cb"]
</code>
</pre>


<p>So, to read our circle, we&#8217;d do:</p>

<pre>
<code class="ruby">
> circle.map{|n| @notes[n]}
 => ["C", "G", "D", "A", "E", "B/Cb", "F#/Gb", "C#/Db", "G#/Ab", "D#/Eb", "A#/Bb", "E#/F"]
</code>
</pre>


<p>Hooray. The circle of fifths. Now, so what? Well, let&#8217;s make a little method to construct a major scale from the <code>@notes</code> variable. We&#8217;ll take a root note as an argument, so we can construct any major scale we like.</p>

<pre>
<code class="ruby">
> def major(root=0)
?>  offset = (0..11).map{|n| @notes[(n+root)%12]}
?>  [offset[0], offset[2], offset[4], offset[5], offset[7], offset[9], offset[11]].join(" ")
?>  end
 => nil
</code>
</pre>


<p>So, just calling <code>major</code> with no arguments should give us the C major scale; calling with, say, 5 should give us F major (5 in this case is the index of F in @notes; but you were already following that, I know):</p>

<pre>
<code class="ruby">
> major
 => "C D E E#/F G A B/Cb" 
> major(5)
 => "E#/F G A A#/Bb C D E" 

</code>
</pre>


<p>So we said that the circle of fifths added a sharp each increment, and then flipped to flats and removed on each increment. Let&#8217;s watch it happen:</p>

<pre>
<code class="">
>> circle.each{|n| puts major(n) }
C D E F G A B
G A B C D E F#/Gb
D E F#/Gb G A B C#/Db
A B C#/Db D E F#/Gb G#/Ab
E F#/Gb G#/Ab A B C#/Db D#/Eb
B C#/Db D#/Eb E F#/Gb G#/Ab A#/Bb
F#/Gb G#/Ab A#/Bb B C#/Db D#/Eb F
C#/Db D#/Eb F F#/Gb G#/Ab A#/Bb C
G#/Ab A#/Bb C C#/Db D#/Eb F G
D#/Eb F G G#/Ab A#/Bb C D
A#/Bb C D D#/Eb F G A
F G A A#/Bb C D E
</code>
</pre>


<p>Not as neat as it could look since I put the #/b both in the original notes array; the note you&#8217;d read would be the one with a consecutive letter after the previous note. So in G, the note following E is F#. In Eb, the note following G is Ab&#8230; and so on. The same note <em>letter</em> only appears once in any given scale. A sharp or flat is added or removed each increment you go around the circle.</p>

<p>I don&#8217;t have any startling conclusions to close this off with. Just that music is pretty cool, and that a few of the things that <em>seem</em> arbitrary just have to be that way &#8211; assuming we&#8217;re going to base the system around 12 equally tempered semitones (see <a href="http://en.wikipedia.org/wiki/Equal_temperament">Equal Temperment</a>, or even <a href="http://en.wikipedia.org/wiki/The_Well-Tempered_Clavier">Bach&#8217;s Well-Tempered Clavier</a> (evidently there&#8217;s some dispute over whether or not Bach&#8217;s intended tuning was equal or, uh, &#8220;well&#8221; tempered; I was not aware of this!)) and a 7 note major scale &#8211; neither of which are absolutely necessary, of course, and there are other ways to do it. See <a href="http://en.wikipedia.org/wiki/Mathematics_of_musical_scales#Mathematics_of_musical_scales">Mathematics of musical scales</a> and <a href="http://en.wikipedia.org/wiki/Musical_tuning#Tuning_systems">tuning systems</a> for more.</p>

<p>Happy musicking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Push it somewhere else]]></title>
    <link href="http://philcrissman.com/2010/08/06/push-it-somewhere-else/"/>
    <updated>2010-08-06T00:00:00-05:00</updated>
    <id>http://philcrissman.com/2010/08/06/push-it-somewhere-else</id>
    <content type="html"><![CDATA[<p><img src="http://philcrissman.com/images/posts/patrick-make-a-gist.jpg" width="440" /></p>

<p>For all the folks in #rubyonrails, and beyond.</p>
]]></content>
  </entry>
  
</feed>
