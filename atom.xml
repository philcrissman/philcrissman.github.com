<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[philcrissman.com]]></title>
  <link href="http://philcrissman.com/atom.xml" rel="self"/>
  <link href="http://philcrissman.com/"/>
  <updated>2012-10-11T09:57:17-05:00</updated>
  <id>http://philcrissman.com/</id>
  <author>
    <name><![CDATA[Phil Crissman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[We're only in it for the money]]></title>
    <link href="http://philcrissman.com/2012/10/11/were-only-in-it-for-the-money/"/>
    <updated>2012-10-11T09:44:00-05:00</updated>
    <id>http://philcrissman.com/2012/10/11/were-only-in-it-for-the-money</id>
    <content type="html"><![CDATA[<p><img src="http://philcrissman.com/images/posts/fz_the_money.jpg" title="A subtle reference" alt="Frank Zappa and the Mothers -- We're Only In It For the Money" /></p>

<p>Those starry-eyed idealists, Frank Zappa and the Mothers of Invention.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arnold's Blueprint]]></title>
    <link href="http://philcrissman.com/2012/10/10/arnolds-blueprint/"/>
    <updated>2012-10-10T13:58:00-05:00</updated>
    <id>http://philcrissman.com/2012/10/10/arnolds-blueprint</id>
    <content type="html"><![CDATA[<p>I saw this a week or two ago, and never even thought about posting it. But it&#8217;s really relevant to everything else I&#8217;ve been thinking and writing about, so I thought I&#8217;d add it here.</p>

<div class="video-container">
  <script src="http://player.espn.com/player.js?&playerBrandingId=4ef8000cbaf34c1687a7d9a26fe0e89e&pcode=1kNG061cgaoolOncv54OAO1ceO-I&width=576&height=324&externalId=espn:8420216&thruParam_espn-ui[autoPlay]=false&thruParam_espn-ui[playRelatedExternally]=true"></script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grit?]]></title>
    <link href="http://philcrissman.com/2012/10/09/grit/"/>
    <updated>2012-10-09T09:51:00-05:00</updated>
    <id>http://philcrissman.com/2012/10/09/grit</id>
    <content type="html"><![CDATA[<p>The topic of &#8220;grit&#8221; is the focus of most of the most recent (<a href="http://5by5.tv/b2w/87">#87</a>) back to work. I&#8217;ve thought along these lines a lot. Like Merlin says a couple times, I feel like if I&#8217;m honest, I&#8217;m lacking in grit. Lack of grit has been an issue in accomplishing (or rather, not accomplishing) a lot of things I&#8217;d <em>like</em> to have done.</p>

<p>There&#8217;s something Merlin said in an early B2W episode that foreshadows this<a href="#one">1</a>, something said in the character of &#8220;that&#8217;s fine for Merlin&#8221;-guy, along the lines of, &#8220;You know, I just can&#8217;t do these things, because I&#8217;m, like, <em>not smart</em> and, like, <em>don&#8217;t try</em>.&#8221; The &#8220;don&#8217;t try&#8221; line is the one I&#8217;m thinking of here.</p>

<blockquote><p><a name="one">1</a> <em>This blog is not intended to be an exercise in &#8220;let&#8217;s comment exclusively on things Merlin and Dan have said in the the Back to Work podcast.&#8221; It just happens that this is maybe the podcast that I listen (and relisten) to the most, and it makes me think about things, and then I want to write about said things. If it comes across as just too sycophantic or something, well, I don&#8217;t think that&#8217;s anything I can help you with, maybe you should read something else.</em></p></blockquote>

<p>Can &#8220;grit&#8221; be developed? I want to believe it can, otherwise I&#8217;d have to resign myself to failure on a lot of areas.</p>

<p>What is &#8220;grit&#8221;? Definitions that came up were along the lines of: Self-restraint, being able to delay gratification. Stick-to-it-iveness.
<span class='pullquote-right' data-pullquote='Very little I&#8217;ve accomplished has been because of &#8220;grit&#8221;.'>
I&#8217;ve accomplished a lot of things by being fortunate, or blessed, or just in the right place at the right time. Very little I&#8217;ve accomplished has been because of &#8220;grit&#8221;.  At least, that&#8217;s how I feel when I look back.
</span></p>

<p>Now, since I just admitted I don&#8217;t have this &#8220;grit&#8221;, here&#8217;s some completely unqualified thoughts on what I imagine <em>might</em> be a way to develop &#8220;grit&#8221;:</p>

<ol>
<li><p>Narrow it down. You are just not going to be able to have a single minded dedication to all the dreams you could ever have. If you think you want to write a novel, go to law school after work, learn to program computers from scratch, learn to draw, work out and look like Arnold Schwarzenegger, and become president, well, you might need to just pick one of those and go for it. Or at least, one at a time. Someone is already reading this and mentally composing a response about how they can and will achieve all their dreams all at once. Which is great, but&#8230; For most of us, if we actually want to accomplish something, we should probably dial it down. I&#8217;m not saying &#8220;don&#8217;t havebig goals&#8221;&mdash;just, maybe, don&#8217;t have <em>20</em> big goals. Pick one. The hardest part, I think, is deciding what you really care about.</p></li>
<li><p>A blueprint. Figure out the plan. The whole plan. If you really want to write a novel, figure out how to do that. Sure, maybe read about it, that&#8217;s important, but don&#8217;t read about it so much that you never actually start doing it. Figure out who what where when how, figure out how many words a day you would need to write, or how many words you <em>can</em> write, and make a plan when each day you&#8217;ll do that. Then do that the first day. Then the second day.</p></li>
</ol>


<p><span class='pullquote-right' data-pullquote='This is the step where you simply keep at it, and it feels like a catch-22, like the way to have grit is just to _have grit_'>
3. ??? Around here&#8230; I don&#8217;t know this step. If I did, I guess I would be someone who already <em>has</em> grit. This is the step where you simply keep at it, and it feels like a catch-22, like the way to have grit is just to <em>have grit</em>, which sounds a little motivational speaky, but is also sort of true (at least in the sense that its a tautology). But what if my problem is, I don&#8217;t stick with things? How do I say, <em>this</em> is the thing that I stick with? You could focus on the goal, the finish line. That sounds like a thing that people say, people who talk about these things. But so, how do you <em>do</em> that?
</span></p>

<p>One thought could be, just continue to focus on your goal, on the &#8220;end&#8221; you want to arrive at. If you continue to focus on your &#8220;goal/end&#8221; (eg I want to have finished a novel) and if that vision is still not enough to get you to write a thousand or 500 or even 100 words a day, well, maybe you don&#8217;t really want to do this thing <em>that</em> badly. Sorry. Maybe you need to find a new thing.</p>

<p>See since we&#8217;re talking about novels (which I do actually want to write, and I&#8217;m beginning to think that maybe I actually don&#8217;t care about it enough to ever do it) I&#8217;m reminded of some advice I read in a writing book, I think it was by Lawrence Block. He said you should take a novel that you like, and dissect it. Use a series of colored pencils and highlight the entire book. Mark with one color where a new character is introduced, or where a goal or a conflict or (etc) happens, until you have dissected the structure/framework if the whole novel. Then just plain copy it. As if you we&#8217;re plugging in your characters for theirs, your story goals for theirs, your settings for theirs, and just write it. His point was, if you do this, it will be this sort of derivative copy novel that sort of sucks, but it <em>will</em> be a novel, with characters and a story and a beginning middle and end (because you straight out copied an existing work that had all these things), and you will have <em>finished</em> it, it will exist. Basically, write one to throw away. So, yeah, it will almost definitely be a bad novel and you won&#8217;t ever want to show it to anyone. But you will have done it, and you&#8217;ll have learned a lot about how a novel works and is structured and how it gets from point a to the conclusion.</p>

<p>Now here&#8217;s the thing: if you&#8217;re like me, you might have just read that, and think it makes sense and would work and you <em>still</em> think that you&#8217;re special and you can skip this step and just write your real novel. And if you&#8217;re like me, you still haven&#8217;t ever done it.</p>

<p>It takes grit to write an entire novel that you know will suck and no one will ever read or publish. But what if <em>doing</em> that meant that next, you really <em>could</em> write that real novel that you actually want to write?</p>

<p>Grit.</p>

<p>I&#8217;m not saying that the above strategy would work, though it probably wouldn&#8217;t hurt and is probably better than never writing anything, but it&#8217;s something to think about: the idea that if you aren&#8217;t willing to pay the price to reach your goal, well, maybe you just don&#8217;t care enough about that goal. Maybe you need a new goal. Selah.</p>

<p>What is the thing that, thinking about it as though it were really possible, as though it were real, could motivate you to take the steps to make it real?</p>

<p>Okay, I&#8217;ve spilled over into Tony Robbins territory, but think about it anyways. What is it that you care enough about to pay the price to make it happen? And if you don&#8217;t care about anything that much, what would that thing be if you <em>could</em>, and is there any way you could <em>make</em> yourself care that much about it?</p>

<p>If you don&#8217;t care that much about the think that you think you want to be your goal, try to imagine what it would feel like to care that much. Picture how you would feel if you were that sort of person. Again, more hippie motivational stuff. Throw it away if it sounds dumb to you. But you never know. It could help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nothing 'just happens'.]]></title>
    <link href="http://philcrissman.com/2012/10/03/nothing-just-happens/"/>
    <updated>2012-10-03T17:16:00-05:00</updated>
    <id>http://philcrissman.com/2012/10/03/nothing-just-happens</id>
    <content type="html"><![CDATA[<p>More from <a href="https://en.wikipedia.org/wiki/Dave_Sim">Dave Sim</a>, this time from the <a href="http://www.cerebusfangirl.com/artists/nftp/185.php">Note from the President in #185</a>:</p>

<blockquote><p>Self-publishing does not just happen. Even if I put everything that I know about self-publishing into a single volume and mailed a copy free to everyone who wrote in asking for advice, self-publishing would not just happen. One of the biggest obstacles you are going to face in trying to self-publish is your own inertia. Jeff Smith&#8217;s standard advice is to &#8216;do your homework&#8217;. By this he means that you should find out everything about publishing and distribution before you even attempt to enter the field. &#8216;Doing your homework&#8217; is very different, however, from the traditional view of that phrase, which has come to mean (in the last half of the twentieth century) send a list of thirty-five questions to an expert and then sit back and wait for a reply.</p>

<p>Understand this:</p>

<p>Not only doesn&#8217;t the world revolve around you, NOTHING revolves around you. You are a human being. Picture yourself as a planet. Your talent, your intended comic book, your story-to-be is your molten core. It is up to you to make an environment for that molten core which is conducive to growth, which will permit your talent to flourish in a hostile world. There are any number of ways to go about this. I always recommend that the story has to come first. You have to have something to say. The only way to find out if you have something to say and the determination and work ethic to see it through to its conclusion is to make a start and stick with it. I find, at this point, that most would-be self-publishers&#8217; eyes start to glaze over.</p>

<p>SNAP SNAP.</p>

<p>WAKE UP!</p></blockquote>

<p>Love this. For years before I left Full Time Employment and went freelance, I would always look at anyone who was self-employed, or a contractor, or working freelance, and be a little jealous, and I would want to ask them <em>how do you do that?</em>, by which I really meant, <em>how can I do that?</em> Invariably, I wasn&#8217;t happy with the answer(s) I recieved. I always felt like there was some sort of magic dust that I was missing which would help me to suddenly &#8220;go freelance&#8221;.</p>

<p>What the &#8220;secret sauce&#8221; actually turned out to be was to just <em>quit</em> a full time IT role at Oracle in exchange for a 3-month contract at a pretty low freelancing rate, because honestly, I really had no idea what I was doing at that point.</p>

<p><em>3 months?</em></p>

<p>Yeah.</p>

<p><em>But what did you plan to do after 3 months?</em></p>

<p>I had no idea. It turned out that the initial 3 months turned into 6 months, after which I was able to go do some work for a different local developer, and so on. In retrospect, I was incredibly fortunate. But I also would never have experienced that &#8220;good fortune&#8221; without just making a start, essentially jumping without a net. I&#8217;m still not sure how my wife dealt with the stress of my taking that leap. It&#8217;s worked out fine&mdash;better than we could have predicted, really, as I&#8217;ve been able to raise my rates substantially over the past 4+ years, and we&#8217;re now doing far better, financially, than if I had just kept my safe corporate job. My first freelancing contract was essentially a paid internship in Ruby on Rails and independent consulting and I&#8217;ll be forever grateful that I had that opportunity.</p>

<p>But there was certainly no way to predict that when I took the leap.</p>

<p>When I think about it now, it seems like one of the best decisions I&#8217;ve ever made. But prior to that, all my thinking and wishing about &#8220;going independent&#8221; was pretty much exactly what Dave Sim describes in the arena of self-publishing; I was hoping to find some nugget of knowledge, some magic step that would cause my indepence to &#8220;just happen&#8221;.</p>

<p>Nothing &#8220;just happens&#8221;.</p>

<p>Except maybe entropy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Mortar than Brick]]></title>
    <link href="http://philcrissman.com/2012/10/03/more-mortar-than-brick/"/>
    <updated>2012-10-03T08:55:00-05:00</updated>
    <id>http://philcrissman.com/2012/10/03/more-mortar-than-brick</id>
    <content type="html"><![CDATA[<p>As I create yet another of these, I felt like I should probably call these &#8220;summaries&#8221; rather than &#8220;reviews&#8221;. These are not &#8220;reviews&#8221; of <a href="http://5by5.tv/b2w">Back to Work</a> episodes; the &#8220;review&#8221; is, they are awesome and you should go subscribe to the podcasts at once.</p>

<h2><a href="http://5by5.tv/b2w/2">Picture of a Boat</a></h2>

<p><strong>Running time:</strong> 1:08:02</p>

<p><strong>Pairs well with:</strong> A dreamcatcher, some ambition, and a picture of a boat. (Dreamcatcher and picture of a boat are optional)</p>

<p>Dan and Merlin talk about dreams which cannot be interpreted on the air. Probably a sex thing.</p>

<p>The possibly canonical cognitive bias is revealed: that other people are stupid and mean, and I have my reasons.</p>

<p>On how Merlin is rarely rehired by companies because he often winds up telling them that the people who hired him are a big part of the problem.</p>

<p>Some chatting about the standard corporate rhetoric on innovation. Everyone wants you to innovate. But it&#8217;s not really a verb. There&#8217;s no &#8220;innovate&#8221; button on Merlin&#8217;s keyboard. If you really want innovation, you need to tolerate the sort if chaos and failure rate that often typifies environments where innovation happens.</p>

<p>Paraphrase: if you really did want innovation everywhere you need to encourage ambitious and crazy efforts that will probably fail.</p>

<p>On genetics: if your company culture doesn&#8217;t foster this sort of thing, that&#8217;s sort of like DNA and its going to be really hard to change. Find the little group in your company that ships the most interesting stuff and find out what it is about their team that makes them able to do that, an try to replicate the <em>spirit</em> that makes that possible. What do they not see as barriers that everyone else sees?</p>

<p>On empowerment: it&#8217;s a shame this concept even has to exist, it&#8217;s a shame people need to ask permission to be awesome.</p>

<p>Dand and Merlin talk about how many people tend to be conservative at work; not wanting to lose job, rock boat, not want to be the guy who came up with The Thing That Just Failed, everyone wants buy in from everyone else.</p>

<p><span class='pullquote-right' data-pullquote='The way you become CEO isn&#8217;t by showing up on time, you become CEO by being so great that the person 1-3 levels above you can&#8217;t keep you from being promoted over them.'>
Maybe you&#8217;re in a place with more mortar than brick. Maybe you aren&#8217;t expected to innovate. So then what? Go ship anyways. The way you become CEO isn&#8217;t by showing up on time, you become CEO by being so great that the person 1-3 levels above you can&#8217;t keep you from being promoted over them.
</span></p>

<p>What are you willing to sacrifice for that thing you care a lot about? Ego. Always being right. If you can&#8217;t take the trade off, then&#8230; You pretty much just need to move on (ie give up)</p>

<p>Stuff about <a href="http://www.cocoatech.com/pathfinder/">Path Finder</a> (app, Mac finder replacement).</p>

<hr />

<p>Great episode. Go thou and do likewise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Do I Become a Professional Golfer?]]></title>
    <link href="http://philcrissman.com/2012/10/01/how-do-i-become-a-professional-golfer/"/>
    <updated>2012-10-01T16:03:00-05:00</updated>
    <id>http://philcrissman.com/2012/10/01/how-do-i-become-a-professional-golfer</id>
    <content type="html"><![CDATA[<p><img src="http://philcrissman.com/images/posts/cerebus168cover.jpg" alt="Cerebus 168" /></p>

<p>I&#8217;ve been re-reading <a href="https://en.wikipedia.org/wiki/Cerebus_the_Aardvark">Cerebus the Aardvark</a> in its entirety; started at issue number 1 a few weeks ago. As I&#8217;ve gone through the issues, I&#8217;ve been reading Dave Sim&#8217;s <em>Notes from the President</em> column. In issue 168, he begins talking about <a href="http://www.cerebusfangirl.com/artists/nftp/168.php">the issue of self-publishing comic books</a>, and I was struck by how his first column on the topic contains advice that is really germane to almost <em>anything</em> that you want to do, but that you don&#8217;t yet know how to do.</p>

<blockquote><p>When young cartoonists ask me how to self-publish, I always liken it to a golf fan going up to Lee Trevino and asking &#8216;How do I become a professional golfer?&#8217; The answer of course is a question. &#8216;Do you have a set of golf clubs?&#8217; Here, let me write that down. Buy a set of golf clubs. And then a second question &#8216;Have you ever played golf?&#8217; Okay, that&#8217;s good. Let me write that down, too. Play some golf. Do you understand? Writing and drawing comic books is like anything else. You have to apply yourself and you have to do it. Assuming I wanted to be Eric Clapton when I grow up (or at least when I&#8217;m older), it makes a great deal of sense for me to buy a guitar and take some lessons before I write and ask him how to become like him. You first have to find out if you have the aptitude for what you&#8217;re attempting to do. Now, the only way that you are going to discover that is to sit down and try to do it. The guideline I always use is A Page a Day. If you can&#8217;t comfortably do a finished comic book page (written, pencilled, inked, lettered and toned) in a single day, you are facing trouble before you get very far along. Assuming that you are going to draw a comic book every month and making allowances for the way that life intrudes despite the best of creative intentions, a page a day is mandatory if you&#8217;re going to stay on your monthly schedule. If it takes you two or three days to do a page, the best that you&#8217;re going to manage is bi-monthly and if two or three days is the best you can manage and most of the time if takes you four or five days, then you are looking at quarterly as the maximum frequency. When you consider that the average black and white comic book is going to sell two or three thousand copies and the profits from that are going to be around two or three hundred dollars, that gives you a total income of seventy-five dollars a month for all of your living expenses. Even the most widely-known and well-thought of black and whites are selling in the low ten to twelve thousand range. It is not a get-rich quick scheme. The first five years that I did Cerebus I could have made more money baby-sitting (that isn&#8217;t a joke). Five years. Think about it.</p>

<p>But, I&#8217;m getting ahead of myself.</p>

<hr />

<p>The most common mistake of the starting cartoonist who wants to self-publish is to ask questions about things that are two or three years down the line. How do I copyright my character? How do I find a printer? How do I solicit the distributors? How much should I advertise? What you are doing is asking Lee Trevino (having already established that you don&#8217;t even own a set of golf clubs) what the best airline is to travel from tournament to tournament: how much caddies get paid; what sort of wood to use on the fifth hole at whatever course.</p>

<p>Go to the bank, take out some money, and buy yourself a club.</p></blockquote>

<p>I know, it&#8217;s ostensibly about making an independent comic book. Again, I think the core of the above advice applies to almost anything you want to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What couldn't you ship?]]></title>
    <link href="http://philcrissman.com/2012/10/01/what-couldnt-you-ship/"/>
    <updated>2012-10-01T08:47:00-05:00</updated>
    <id>http://philcrissman.com/2012/10/01/what-couldnt-you-ship</id>
    <content type="html"><![CDATA[<p>I never used to listen to podcasts.</p>

<p>That ever so slight barrier to entry, the friction of having to actually subscribe to an RSS feed and take the time to plug in to iTunes or transfer things to a phone, always was just enough friction to stop me from bothering. That and the huge variety of available podcasts (even several years back, it seemed like there were innumerable podcasts out there), and <em>no idea</em> how to evaluate what I would want to listen to.</p>

<p>My friend Todd Emmel of <a href="http://slantwiselabs.com">Slantwise Labs</a>, who I was working for at the time, had started listening to a new show called &#8221;<a href="http://5by5.tv/b2w">Back to work</a>&#8221;, and asked me if I&#8217;d listened to it, or was aware of it. &#8220;Why, no,&#8221; I said. &#8220;What is it?&#8221; &#8220;It&#8217;s this new podcast that Merlin Mann is doing,&#8221; he said.</p>

<p>So, I knew exactly 3 things about Merlin Mann at that point. I knew he was behind <a href="http://43folders.com">43 Folders</a>, which I had not really heard of or read until about the time he stopped publishing regularly on it; I knew he was behind <a href="http://5ives.com">5ives</a>, which I thought was awesome and which had also stopped being updated; and I knew he had something to do with <a href="http://youlooknicetoday.com">You look nice today</a>, which I had heard wonderful things about and which I had never taken the time to listen to. And which had also stopped being updated.</p>

<p>So, Todd said this &#8220;Back to work&#8221; was really good. So I took the time to overcome the minimal friction between finding a podcast and actually listening to it, and downloaded the first handful of episodes (I think there were only 3 or 4 episodes published at the time).</p>

<p>Long story short, I&#8217;ve now been a listener for the past year+, and also listen to a handful of other podcasts, mostly also <a href="http://5by5.tv">5 by 5</a> podcasts, because they&#8217;re great.</p>

<p>Just because, I recently decided to go back and re-listen to all the B2W episodes. Unlike many podcasts which may focus, at least in part, on current events, B2W&#8217;s topics are generally contextless, which lends <em>very</em> well to relistenability. So this is the first of (possibly many) reviews of historical B2W episodes.</p>

<h2><a href="http://5by5.tv/b2w/1">The Alligator in the Bathroom</a></h2>

<p><strong>B2W S01E01</strong></p>

<p>Running time: 1:29:28</p>

<p><em>In which the genesis and premise of the show are discussed at length, and we are promised that Merlin intends to do more than 3 episodes. Also, Florida, San Francisco, kids, Buddhism, and ADHD.</em></p>

<p><strong>Pairs well with:</strong> 32oz of black coffee and 30mg of generic Adderall.</p>

<p>Still an episode worth a listen (or re-listen), despite the &#8220;sticking our heads up each others ass and saying how nice it smells&#8221; (Merlin&#8217;s phrase). It does, I thought, help to establish the context of how and why the show began and what both Merlin and Dan hope to get out of it, the &#8220;goals&#8221; and general topics of the show.</p>

<p>A phrase that came up was something along the lines of, &#8220;trying to become good enough that the people you really admire wouldn&#8217;t mind working on something with you.&#8221; Which is something that I had really never thought of, and did make me stop and think.</p>

<p>Another sort of blindingly obvious but still helpful, for me, observation, was the simple statement that if you want to mow your lawn, you can&#8217;t go to the movies. I.E., you really can only do a limited amount of things, and in order to to the things you really want, you&#8217;re going to need to choose the things that you don&#8217;t do. Leading up to: the higher up you go, the more opportunity you have to disappoint more interesting people.</p>

<p>Related takeaway: speaking of distraction; consider that if you have time to masturbate (assuming you have time for that), or to play video games, or to pick up your zombies on Facebook, you&#8217;re not really distracted. Selah.</p>

<p><strong>Notable:</strong> The phrase, &#8220;It&#8217;s your show&#8221; makes its first appearance right here in E01, albeit without the sharp passive aggressive undertone (or overtone) which it acquires later in the shows run. Also, &#8220;that&#8217;s fine for Merlin&#8221; guy shows up, though I don&#8217;t think that precise phrase is used in this episode.</p>

<p>Also, <a href="http://brettterpstra.com">Brett Terpstra</a> is referenced. But without the enaging, idiosyncratic pronounciation of his last name.</p>

<p>B2W E01. If you have never listened, it&#8217;s worthwhile to start right at the beginning.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Star Trek Ringtone]]></title>
    <link href="http://philcrissman.com/2012/09/07/star-trek-ringtone/"/>
    <updated>2012-09-07T14:26:00-05:00</updated>
    <id>http://philcrissman.com/2012/09/07/star-trek-ringtone</id>
    <content type="html"><![CDATA[<p>I made this a long time ago, but since it&#8217;s about to be the anniversary of the first episode (September 8, 1966), here&#8217;s a ringtone I made, using a snippet from the infamous &#8220;battle/fight music&#8221; from the original series.</p>

<p>Download:</p>

<p><a href="http://philcrissman.com/assets/startrek.m4r">startrek.m4r</a></p>

<p>Listen before you download:</p>

<script type='text/javascript' src='http://philcrissman.com/javascripts/libs/swfobject-dynamic.js'></script>




<div id='mediaplayer'></div>




<script type="text/javascript">

   var flashvars = {
      'file':   '/assets/startrek.mp3',
      'controlbar':     'bottom'
   };
    
   var params = {
      'allowfullscreen':        'true',
      'allowscriptaccess':      'always'
   };
 
   var attributes = {
      'id':                     'playerID',
      'name':                   'playerID'
   };

   var callback = function(){};

   swfobject.embedSWF('/assets/jwplayer/player.swf', 'mediaplayer', '560', '24', '9', flashvars, params, attributes);
    
</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The song that changes everything]]></title>
    <link href="http://philcrissman.com/2012/09/05/the-song-that-changes-everything/"/>
    <updated>2012-09-05T21:52:00-05:00</updated>
    <id>http://philcrissman.com/2012/09/05/the-song-that-changes-everything</id>
    <content type="html"><![CDATA[<p>John Roderick talked in RoL E42, <a href="http://www.merlinmann.com/roderick/ep-42-your-hands-would-be-your-passport.html">Your hands would be your passport</a>, about his first time hearing the Beatles song <em>I am the walrus</em>. To paraphrase, he spoke of listening, speechless, staring at the radio, listening to &#8220;this insane music&#8221;, and how it changed everything. See around minute 7:46.</p>

<p>I had a similar experience hearing that song &#8211; I mean, it is a crazy scary song, and prior to that, I think I&#8217;d heard mostly short, happy songs from the Beatles.</p>

<p>But my only real parallel to that experience would be slightly before this, when I heard Led Zeppelin&#8217;s <em>Whole lotta love</em> for the first time.</p>

<!--more-->


<p>It&#8217;s probably hard to believe, but I made it to about the age of 17 without ever hearing Led Zeppelin. I&#8217;m sure I must have heard a song or two on the radio or in the background, but I didn&#8217;t know it to be Led Zeppelin. I was raised in a pentecostal Christian household, and we didn&#8217;t listen to rock music. Well, later we kids listened to <em>Christian</em> rock music. So, at about the age of 12, I thought Amy Grant was rock music. Soon after that it was other shining examples of Christendom&#8217;s rock outreach, like Petra, Degarmo &amp; Key, Mylon LeFevre, and so forth. Eventually it was Stryper. Yes, Stryper. If you know of these bands, you probably know they weren&#8217;t great, but they did play, I suppose, what for the 80s passed as a sort of rock &#8216;n roll music.</p>

<p>It was around this time that I began to hear <em>about</em> Led Zeppelin. See, I wanted to learn to play guitar, so I would read guitar magazines, and I learned that there was this giant in the history of modern rock and metal (this was about 1989, 90 maybe) called Led Zeppelin. So I was indoctrinated that Led Zeppelin was legendary, was awesome, were <em>giants</em>, and I more or less believed it whole-hearted, and I hadn&#8217;t even heard a single song. Without even hearing the music, I had built this legend in my mind of &#8220;Led Zeppelin&#8221;, and they had this mythological place in my thinking about rock music. Again, I still hadn&#8217;t even heard a song.</p>

<p>Eventually I began to seek out more music. This was the late 80s, remember. I had this habit of taking a blank cassette tape and listening to the radio and hitting <em>record</em> if I&#8217;d hear a song that I thought I&#8217;d like. Remember, again, the <em>only music I knew</em> was this 80s Christian rock. That&#8217;s about it. Overproduced (if not just badly produced), cheesy, not-necessarily-great-song-writing, derivative, bad. That&#8217;s all I really knew.</p>

<p>So this one night, Led Zeppelin comes on the radio. Not just any song, but <em>Whole Lotta Love</em>.</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/Mln0RciE2o0" frameborder="0" allowfullscreen></iframe>


<p>I don&#8217;t know if I can properly communicate the impact of that song at that point in my life. The syncopation, the raw space and rhythm in that opening, was so alien to me, I was almost unable to process it as &#8220;music&#8221;. Plant&#8217;s shrieking was nothing short of scary. The rhythm of the opening and main guitar riff was so spare, so odd (I&#8217;d never heard <em>anything</em> remotely like it), I can remember not even knowing what to think. I imagine I was open-mouthed, shocked, alarmed, and in a little bit of awe and possibly confusion &#8211; this is <em>it</em>? <em>This</em> is Led Zeppelin? This is that legendary band? It sounded like the guitar was being hit with something, or wrung though a rolling pin (I don&#8217;t know if I knew then that Page was using a violin bow for some of that, probably not).</p>

<p>Then the guitar solo came in.</p>

<p>I mean the lick starting right after all the noise and weird sounds and Robert Plant moaning and screaming comes to that that crescendo, and there&#8217;s that sharp stop to two hard beats from John Bonham. (Right around the 3 minute mark, in the youtube video above) Then that series of licks, short bursts of notes in between the drum beats and over that steady high-hat tapping. Still one of my favorite guitar solos of all time.</p>

<p>I think I had to hear the song several more times before the whole thing really grew on me. But John Roderick, in relating his first time hearing <em>I am the walrus</em> reminded me of this. Every once in a while, you&#8217;ll hear something that utterly shatters your preconceptions of what music is allowed to do (years later, Fugazi&#8217;s <em>Repeater</em> was another one like that &#8211; yes, years later, I didn&#8217;t get into Fugazi until years after everyone else, so sue me).</p>

<p>I&#8217;m not sure everyone has had that experience. I mean, I think a lot of people have, maybe most people. But at the same time, I expect there are a lot of people whom, if you were to ask &#8220;What was that song which, the first time you heard it, changed everything?&#8221; &#8211; that there are a lot of people who just wouldn&#8217;t have an answer for that. Maybe music isn&#8217;t their thing, or they just don&#8217;t care that much, or maybe they&#8217;ve just forgotten.</p>

<p>On the other hand, I expect many people do have that memory. If you really like music at all, you probably have that moment filed away somewhere, that first time you heard the song that changed everything.</p>

<p>Postscript: can&#8217;t resist adding one more, possibly my favorite Zeppelin track, but that&#8217;s really hard to say:</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/WbrjRKB586s" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Touching the stove, broken glass, and other peoples mistakes]]></title>
    <link href="http://philcrissman.com/2012/08/26/touching-the-stove/"/>
    <updated>2012-08-26T21:21:00-05:00</updated>
    <id>http://philcrissman.com/2012/08/26/touching-the-stove</id>
    <content type="html"><![CDATA[<p>We&#8217;re supposed to learn from other peoples mistakes.</p>

<p>At least, this is what we&#8217;re told our whole lives. Those who fail to learn from history, we&#8217;re told, are destined to repeat it (possibly next semester). Eleanor Roosevelt said, &#8220;Learn from the mistakes of others. You can&#8217;t live long enough to make them all yourself.&#8221; Sounds like good advice. Who wants to make mistakes when they can be avoided?</p>

<p>But I distinctly remember having to touch the element on the top of the stove before I learned that I should have listened to my mom.</p>

<!--more-->


<p>We have a lot of literature in the field of Software Development which is basically &#8220;learning from the mistakes of others&#8221; wrapped in a bit of ceremony and jargon. Object oriented programming, design patterns, agile practices, XP, Scrum, code smells, refactorings, anti-patterns &#8211; all these things, at their core, are just one or more software developers saying to us: &#8220;Look. I&#8217;ve done this before. I&#8217;ve made mistakes. I&#8217;ve written large, unmaintainable systems, and I think we&#8217;ve found a way to avoid the mistakes we&#8217;ve made before &#8211; listen to this!&#8221;</p>

<p>Thankfully, this shared wisdom usually (eventually) gains a lot of traction. Other developers look into the patterns, the agile practices, the refactorings, and they see some of the pitfalls they themselves have fallen into in the past &#8211; or, may even still be falling into. You start getting wide-spread buy in into these ideas. They spread, they&#8217;re taught, they grow. We write manifestos, or sign them, and start to feel like we&#8217;re making some progress, like we&#8217;re figuring something out.</p>

<p>Somehow, though, once these things start to become entrenched, things get harder for the next generation coming in. The new programmers are handed a group of best practices, but they&#8217;ve never actually made or seen the mistakes that prompted the creation of these best practices in the first place. That makes some of these things seem silly, extraneous, or gratuitous. Why does this class &#8220;need&#8221; to be split into two classes? Cohesion? Who cares, really? Why should those methods be private, anyways? Why does my class need to be encapsulated?</p>

<p>I remember having these questions my first year of computer science; learning Java and (apparently) OOP. Only, we didn&#8217;t really learn OOP at all. We learned to type <code>public static void main(String[] args)</code> a lot. We never learned <em>why</em>. I remember being told that keeping methods private meant that we could hide the implementation from other classes, but I was never told why I would want this.</p>

<p>We usually do wind up seeing the wisdom, eventually, but we need to write some pretty bad code first. And even then, we may only see our mistakes if we&#8217;re lucky enough to recognize our mistake as something we&#8217;ve been warned about in the past, or if we&#8217;re fortunate enough to have a mentor who can point out where we went wrong, and what we might have done to avoid our mistake.</p>

<p>We need to actually make some of these mistakes, in order to learn from them. In order to see how much wisdom there is in some of this classic Software Development literature, we&#8217;re going to have to write some truly awful code.</p>

<p>I wish I could see a way around this; I&#8217;d love to think that we can just warn each successive generation of new software developers about the traps and snares and regions where there be dragonnes, but my experience and my gut tells me that this just isn&#8217;t going to work, compeletely. It&#8217;s good &#8211; I&#8217;m not saying we stop doing this. But I had to make some mistakes before I started to see how much smarts there was in the OOP model; before I started to realize the value of some design patterns. I had to write some bad code in order to see that certain things were, in fact, &#8220;bad&#8221;.</p>

<p>Even worse; some of these mistakes can only be made in large programs or systems. You can&#8217;t necessarily learn these things by writing a program to convert Celsius to Fahrenheit, and back. You need to amass some technical debt in a system which is actually supposed to go into production.</p>

<p>I want there to be another way, but I don&#8217;t think there is.</p>

<p>So, what then? Are we cursed with always having bodies of horrible code, perpetrated by each new generation of software devs as they stumble toward making better sofware?</p>

<p>Well. Probably. But hopefully, maybe, we can minimize it.</p>

<p>Just because we need to make <em>some</em> mistakes, doesn&#8217;t need we need to make <em>all</em> the mistakes over again each time.</p>

<p>If I&#8217;ve been told about patterns, about refactorings, about technical debt &#8211; then hopefully I&#8217;ll have a better chance of recognizing my mistakes the <em>first</em> time I make them (or at least, the second, or third) &#8211; rather than the fifth, or eighth, or tenth time I make them.</p>

<p>Now, that&#8217;s just the thing, about touching the red hot element on the top of the stove: I actually learned <em>two</em> things, there. First, yes, I learned that the stove was actually hot. But second, I learned that when my mom told me not to touch something, she wasn&#8217;t just making up arbitrary rules. Suddenly, it&#8217;s a lot more likely that I&#8217;ll listen to <em>other</em> things that she says. Why? Do I need to be hit by a car before I learn not to play in the street? Thankfully, no. I learned that she was telling the truth about the stove. Even as a five-year-old, this makes me think that hey, maybe mom knows a thing or two. Maybe I shouldn&#8217;t have touched the stove. Maybe I shouldn&#8217;t play in traffic, either.</p>

<p>Hopefully, if we combine reiterating these concepts about OOP, about patterns, about good software design, about Test Driven Development, then when we make mistakes, we not only recognize them faster, but all the rest of the advice we&#8217;ve been ignoring suddenly seems a little more important.</p>

<p>If I realize that my horrible unmaintainable mess of code was caused by violating principle <em>X</em>, maybe I&#8217;ll also take another look at principles <em>Y</em> and <em>Z</em>.</p>

<p>In the first edition of Obie Fernandez&#8217; <em>The Rails Way</em>, one of the technical reviewers made a comment in the section that was discussing the :include option for one of ActiveRecord&#8217;s class methods. Wilson said:</p>

<blockquote><p>Let people learn eager loading by crawling across broken glass, like we did. It builds character!</p></blockquote>

<p>The part of your brain that has always been told to &#8220;learn from the mistakes of others&#8221; rebels at a statement like this. But that little sidebar has stuck in my mind since I first read it, years ago.</p>

<p>Maybe there are some mistakes you <em>have</em> to make yourself.</p>

<p>Then the best thing we can hope for is that we have enough latent sofware development wisdom, somewhere in our heads, which we were taught (but ignored), that we can recognize we&#8217;ve made a mistake that many others have made before. A mistake that could have been avoided.</p>

<p>Maybe, rather than trying to set up new software developers so that they never need to make any mistakes, ever, we should set them up to make as many mistakes as possible, as soon as possible, and give them the tools to identify these mistakes so that they don&#8217;t need to make them again.</p>

<p>Maybe we can start to get better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking about Lift]]></title>
    <link href="http://philcrissman.com/2012/08/03/thinking-about-lift/"/>
    <updated>2012-08-03T08:37:00-05:00</updated>
    <id>http://philcrissman.com/2012/08/03/thinking-about-lift</id>
    <content type="html"><![CDATA[<p><a href="http://philcrissman.com/images/posts/lift-icon.png"><img src="http://philcrissman.com/images/posts/lift-icon.png" width='320' /></a></p>

<p>Starters, <a href="http://lift.do">Lift</a> is a really nice app. It looks and acts great. It has a shiny checkbox that is large and round and easy to tap, and it has pretty graphs that look a little like graphic equalizers from mid-90s stereos with digital interfaces. I can choose a whole list &#8216;habits&#8217; which are then listed and shared, and if I check a habit for the day, then I can see all the other people who recently also did this habit. I can also give these complete strangers who have also seen fit to track their performance in consistent multivitamin consumption &#8220;props&#8221;, and can (in turn) receive &#8220;props&#8221; from them for performance of the same.</p>

<!--more-->


<p><a href="http://philcrissman.com/images/posts/lift-checkbox.png"><img src="http://philcrissman.com/images/posts/lift-checkbox.png" width='320' /></a> <a href="http://philcrissman.com/images/posts/lift-graph.png"><img src="http://philcrissman.com/images/posts/lift-graph.png" width='320' /></a></p>

<p>Then I will get a cheery email in my inbox the next day, Clarence459 has given you props for taking a multivitamin.</p>

<p>Thanks, Clarence459! It was rough, but I got it done. Now if only I can continue this arduous habit, I may be a statistical margin of error healthier when I&#8217;m eighty-four, so, I&#8217;m looking forward to that. Though, actually, the kudos are kind of nice. Who doesn&#8217;t like a pat on the back?</p>

<p>There is also the assumption that everyone everywhere will be more than happy to share their personal goals, and in particular share them with everyone else who is trying to accomplish the same thing. So I&#8217;m guessing &#8220;stop looking at porn on the Internet&#8221; will <em>probably</em> not be showing up in the list of habits any time soon.</p>

<p>That&#8217;s fine, though. It&#8217;s about affirmation, about things you want to change. I think most material about goals and habits would suggest that these things should ideally be positive and specific; not &#8220;Stop procrastinating&#8221; or &#8220;blog more&#8221;, but rather; &#8220;Work n hours&#8221;, &#8220;Write 1 blog post&#8221;, etc.</p>

<p><a href="http://philcrissman.com/images/posts/lift-list.png"><img src="http://philcrissman.com/images/posts/lift-list.png" width="320" /></a></p>

<p>This leads to another pitfall; when you first begin assembling your list of habits, you are shown the list of habits that other people have entered. It&#8217;s very easy to just start adding some habits, such as &#8220;Blog more&#8221;, because on seeing it you think, &#8220;Yeah, I actually would like to blog more. I should add this habit.&#8221; Not to get all motivational-speaker-goal-instructional, but that&#8217;s a terribly worded goal. More than what? If I have written one blog post in the last 6 months, then technically writing <em>two</em> blog posts in the next six months will be &#8220;blogging <em>more</em>&#8221;, but somehow I&#8217;m betting that&#8217;s not what we all had in mind when we checked off that habit. Once a habit is on your list, you have to take a bit of thought to remove it and replace it with a better worded habit. I mean, it isn&#8217;t hard, but there&#8217;s this thing you&#8217;d have to do and it&#8217;s really easy just not to bother.</p>

<p>Don&#8217;t misunderstand me, I like the app. I think a good list of positive habits than you can track to see how you <em>really</em> do at what you think you <em>should</em> be doing is a good thing. I can see it helping me reinforce some habits. I can even see the social aspect having some influence, though I&#8217;m not totally sold yet.</p>

<p>If you&#8217;d like to try Lift, visit <a href="http://lift.do">Lift</a>, or hit me up on <a href="http://twitter.com/philcrissman">twitter</a> and I can send you an invite. Even with an invite, I think they are rolling out the Beta in waves, so you might not get an invitation right away, but theoretically you might be higher in the queue.</p>

<p>I guess now I can go check off &#8220;Blog more&#8221; in my list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Not far from the tree]]></title>
    <link href="http://philcrissman.com/2012/07/17/not-far-from-the-tree/"/>
    <updated>2012-07-17T14:08:00-05:00</updated>
    <id>http://philcrissman.com/2012/07/17/not-far-from-the-tree</id>
    <content type="html"><![CDATA[<p><a href="http://philcrissman.com/images/posts/sam-laptop.jpeg"><img src="http://philcrissman.com/images/posts/sam-laptop.jpeg" width="440" /></a></p>

<p>Our son Samuel is almost 17 months old, now. He&#8217;s the coolest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned Selling Pizzas Door to Door]]></title>
    <link href="http://philcrissman.com/2012/06/22/what-i-learned-selling-pizzas-door-to-door/"/>
    <updated>2012-06-22T21:08:00-05:00</updated>
    <id>http://philcrissman.com/2012/06/22/what-i-learned-selling-pizzas-door-to-door</id>
    <content type="html"><![CDATA[<p>In 1991 I had graduated from high school and was well on my way to being an unemployed drug addict. Well on my way, as in, I was an unemployed drug addict.</p>

<p>I&#8217;m not sure if you&#8217;ve ever been a drug addict, but it&#8217;s difficult to buy drugs when you&#8217;re broke. This one day there was one of those ads in the classifieds of some local paper, I can&#8217;t remember the content, but it sounded good so I went to check it out.</p>

<p>It was pretty much a pyramid scheme. Here was the deal:</p>

<p>You sold pizzas, door to door.</p>

<!--more-->


<p>What they did was, they had a truck that had some big old pizza warmers in the back, you&#8217;d meet up with the truck every few blocks and get fresh pizzas (assuming you&#8217;d sold any). You had one of those insulated bags that holds five or six pizzas in it, and you&#8217;d go door to door trying to sell them. You can negotiate to your hearts content; sell the pizzas for whatever you want, you just need to pay $3(or something, I forget) for every pizza you no longer have at the end of the day. So, if you sold 6 pizzas for $7 each, or something, you made $4 per pizza, or &#8230; $24. Yeah, I know.</p>

<p>&#8220;That doesn&#8217;t sound like a pyramid scheme,&#8221; you say. Wait.</p>

<p>So, when you join, you join <em>under</em> someone who&#8217;s been there over four months. They are your mentor, they get an extra commission for every pizza you sell.</p>

<p>Wait! There&#8217;s more. After <em>you</em> have been there for 4 months, you can get new people under <em>you</em>, and then you get a kickback for every pizza <em>they</em> sell.</p>

<p>Wait! There&#8217;s more. If a senior dude gets 4 people under him, and all four of those people stay on for 4 months, the company opens a new pizza store, and the dude gets to be the manager of it.</p>

<p>The whole line was, if you stick with this, you&#8217;ll not only make more than $24/day, you&#8217;ll be <em>rich</em>. Stinking crazy million-dollar rich. One of the &#8216;mentors&#8217; told me, quite seriously, that he planned to buy a hockey team when he got to the point of getting his own pizza store.</p>

<p>You were trained to lie to the customer.</p>

<p>They were little lies; but basically, they didn&#8217;t want to try to explain that, yes, we were a pizza place that sold pizzas door to door. So we told people that we were doing a promotion for a new pizza store that had opened up in the area, and to promote the store we were selling pizza door to door. It was all a line of BS, there was no &#8220;new pizza store in the neighborhood&#8221;, just a truck driving around with warm pizzas in the back.</p>

<p>So, enough about crazy business models. I only stuck with this for a few days, before I started to think that the money was not worth pounding the pavement trying to convince people to purchase pizza out of the blue. But in that time, I think I could safely say I learned a few things.</p>

<ol>
<li><p><strong>If it sounds to good to be true, it probably is.</strong> The business model was crazy. Completely insane. Take heed.</p></li>
<li><p><strong>People will buy things if you ask them.</strong> I was pretty introverted, and would <em>never</em> have considered myself a salesman. But after knocking on door after door after door after door, I began to realize that some people would buy a pizza if you asked them to, especially if you made it seem like a good deal and dropped the price a little, just for them. Not everyone, but some folks.</p></li>
<li><p><strong>You can break out of your shell.</strong> I was in a shell, big time. I&#8217;ve always been an introvert, but as late teen, I was still hopelessly quiet, socially awkward, never knowing what to say or how to carry on conversations. After two days of knocking on doors and asking every single stranger I met if they&#8217;d like to order a pizza, I began to notice that: talking became easier. You began to learn that there wasn&#8217;t a huge secret, that you just open your mouth and say things, that no one else knows what to say either, so just say something.  Seriously, at this time among my drug addict friends, my nickname was &#8220;rock&#8221;&#8230; because I never talked. I just sat there and smiled and was really good at rolling joints.</p></li>
<li><p><strong>You don&#8217;t have to keep doing something you don&#8217;t want to do.</strong> I quit that &#8220;job&#8221; after 2 days because it was clearly a terrible business. At least to me. Okay, really the reason I quit was because I&#8217;d stayed out late the night before getting stoned and I wanted to sleep in. It was a long time ago, I feel much better now. Anyways, you need to be careful with this, because after quitting I probably stayed unemployed for, I don&#8217;t know, a couple years. That&#8217;s another story.</p></li>
</ol>


<p>I don&#8217;t know that I learned anything else. But anyways, that&#8217;s the story of how I sold pizzas door to door for a couple days in 1991.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code isn't swayed by logic]]></title>
    <link href="http://philcrissman.com/2012/05/18/code-isnt-swayed-by-logic/"/>
    <updated>2012-05-18T08:32:00-05:00</updated>
    <id>http://philcrissman.com/2012/05/18/code-isnt-swayed-by-logic</id>
    <content type="html"><![CDATA[<p>&#8220;What is it that we want to get out of code? The most important thing is learning. The way I learn is to have a thought, then test it out to see if it is a good thought. Code is the best way I know of to do this. Code isn&#8217;t swayed by the power and logic of rhetoric. Code isn&#8217;t impressed by college degrees or large salaries. Code just sits there, happily doing exactly what you told it to do. If that isn&#8217;t what you thought you told it to do, that&#8217;s your problem.&#8221;
- Kent Beck, <a href="http://www.amazon.com/gp/product/0321278658/ref=as_li_ss_tl?ie=UTF8&amp;tag=idepermin-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321278658">Extreme Programming Explained</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Read Web Analytics]]></title>
    <link href="http://philcrissman.com/2011/10/10/how-to-read-web-analytics/"/>
    <updated>2011-10-10T00:00:00-05:00</updated>
    <id>http://philcrissman.com/2011/10/10/how-to-read-web-analytics</id>
    <content type="html"><![CDATA[<p>The CEO of BigCorp just got the company&#8217;s web analytics report and is
trying to make sense of it. He calls in his lead developer and asks him
what the analytics report says.</p>

<p>&#8220;We&#8217;re doing great,&#8221; says the developer. &#8220;Look at all these hits and
page views. We&#8217;re having no scaling issues. The report says everything
is going well.&#8221;</p>

<p>Happy but not satisfied, the CEO calls in his head of marketing and asks
her what the analytics report says.</p>

<p>&#8220;Not so good,&#8221; says the head of marketing. &#8220;We have a lot of page views,
but no one is sticking around very long or drilling deeper into the
site. We need to generate more content and revamp our web design.&#8221;</p>

<p>A little nervous now, the CEO also calls in the SEO consultant who&#8217;s
been working with the company, and asks the consultant what the
analytics report says.</p>

<p>The SEO consultant spends a few minutes reading the report. After
looking around to make sure the door is closed and no one is listening,
the SEO consultant leans forward and asks, &#8220;What would you like it to
say?&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Too Clever To Debug]]></title>
    <link href="http://philcrissman.com/2011/07/06/too-clever-to-debug/"/>
    <updated>2011-07-06T00:00:00-05:00</updated>
    <id>http://philcrissman.com/2011/07/06/too-clever-to-debug</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/themadlolscientist/2538226772/sizes/z/in/photostream/"><img src="http://philcrissman.com/images/posts/math_fail.jpg" width="440" /></a></p>

<blockquote><p>&#8220;Debugging is twice as hard as writing the code in the first place.  Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.&#8221;
&#8211;Brian Kernighan</p></blockquote>

<p>This sounds nice, and can (maybe) be good advice in some cases. But it can&#8217;t possibly be true; in fact, it rests on a bit of a logically flawed syllogism:</p>

<ul>
<li>A: Debugging is twice as hard as writing code.</li>
<li>B: Writing code is hard.</li>
<li>C: Ergo, if you write the hardest code you possibly can, you are not smart enough to debug your own code.</li>
</ul>


<p>The problem sits in both in assumption A, and in an unspoken assumption about what it means for something to be &#8220;hard&#8221;.</p>

<p>Regarding A, there&#8217;s no backing behind this &#8220;debugging is twice as hard&#8221; assumption; it&#8217;s simply stated. Regarding the idea of relative <em>hardness</em> of a problem; the conclusion to the above syllogism assumes that there is a ceiling of &#8220;hardness&#8221; which you are capable of comprehending. If your code is at that ceiling, it argues, then debugging it will be impossible for you, because debugging it will be harder than writing it, which was the limit of how &#8220;hard&#8221; a problem you can solve. I reality, I don&#8217;t believe this to be the case; something may be &#8220;harder&#8221; than anything I&#8217;ve yet worked through, but that only means it might take me more time and more effort to understand it; not that I cannot possibly comprehend it.</p>

<p>Now, we all know that bugs can be hard to find and fix, so we tend to simply accept, even encourage, statements like this. But are they really true?</p>

<p>Think back to your Algebra, Trig, or Calculus classes; if you took these in the same sort of classes, with the same sort of textbooks, that I did, you were routinely given assignments whose answers were in the back of the book. The idea was, you would work through the problems, and then check your answer to see how you did. If you had an incorrect answer, then you would look at the steps you took to solve the equation until you found the point at which you had made a mistake.</p>

<p>This is, to my mind, completely analogous to programming. You write a piece of code to do a certain thing; then you either write a test, or you simply run it with some sample input, to ensure that it does what you think it does. If you test it thoroughly (note: this <em>is</em> actually hard, and is the reason that bugs often slip into production code), then you will either:</p>

<ul>
<li>a) discover that your code successfully does what you intended, or</li>
<li>b) discover a case where your code returns an incorrect result; in other words, a bug, or a place where you made a mistake.</li>
</ul>


<p>In case b, you&#8217;ll do the same thing you used to do with your math homework; you&#8217;ll start going through it until you find the place where you made a mistake, and you&#8217;ll fix it, and (ideally), you&#8217;ll write a test that mocks this scenario, and be satisfied that this bug is squashed.</p>

<p>Debugging is indeed hard; there are several things which make it harder than just solving a math equation. For one thing, in your programs, you may not have total control over what inputs (if applicable) are sent to your function. You might intend that factorial(num) always receives an integer as its argument. What if some malevolent person calls it and sends a String? An octal value? An object? An array? Do you care? Does your function try to detect this and either raise an error or return false? Is returning false or nil <em>really</em> what you want to do in that case? What if a number is sent that is larger than MAX_INT? Does it fail silently, interpret the number as whatever your programming language sees it, raise an error&#8230; ? In comparison, you can pretty much ensure that x, whatever it may be, in your Algebra exercise, is a number. It&#8217;s probably a Real number. And you can probably find it without too much trouble.</p>

<p>Another thing that I like about this example is that it basically shows that the process of learning math is essentially the process of locating and fixing your mistakes. The instructor, the course, <em>assumes</em> that you will not always get the correct answer. That&#8217;s the whole reason there are answers in the back of the book, and that you are assigned those questions which actually have answers. The basic premise is that you will get some questions wrong, and that through the process of realizing you are wrong and going back to find where you are wrong (and fixing it), you are doing something which we call <em>learning math</em>.</p>

<p>Programming, I&#8217;d argue, works the same way. You learn to program, <em>not</em> by consistently writing correct programs, but by writing bugs. Then, once you realize you have written a bug, you locate it, attempt to understand <em>why</em> it&#8217;s a bug, why you erroneously believed that it would work, what you should do instead, and how to do that thing.</p>

<p>We call this &#8220;learning to program&#8221;.</p>

<p>If you are not smart enough to find and fix bugs, you are actually not smart enough to learn to program. The good news is, you <em>are</em> smart enough to find and fix bugs, and you are smart enough to program.</p>

<p>The logical error comes in the assumption that <em>writing the hardest/most complex/most clever code that you can</em> is the theoretical limit of your intelligence, and that, since &#8220;debugging is harder than coding&#8221;, you are not clever enough to see the bugs in your own code.</p>

<p>That&#8217;s similar to saying that if you are doing the hardest Calculus question you are currently capable (or barely capable) of doing, if you make a mistake, you are unable to find and fix that mistake, because finding the mistake is (somehow) harder than solving the problem.</p>

<p>Put that way, it seems absurd. Of course finding your mistake isn&#8217;t &#8220;harder&#8221; than solving the problem; finding the mistake is <em>part of</em> the problem. In fact, since generally every step in solving an equation or working out an integral or a derivative involves smaller steps based on things you have <em>already learned and mastered</em> (again&#8230; theoretically), you almost definitely <em>can</em>, for sure, find your error if you go through each of your steps carefully, thinking about what you are doing and why you&#8217;re doing it.</p>

<p>Sure, finding bugs is hard. That&#8217;s because if it was easy, you wouldn&#8217;t have written the bug in the first place. The bug represents that place in your algebra homework where you&#8217;d make that tiny arithmetic error, or forget to flip the sign when a number was/wasn&#8217;t negative, or where you&#8217;d mis-apply some other mathematical rule. Spotting where you made that error is simply the process of learning math.</p>

<p>That&#8217;s not the same as it being <em>too hard</em> for you to accomplish. I would guess (though I can&#8217;t <em>know</em> this) that Mr. Kernighan intended his little aphorism to be taken with a rather liberal grain of salt, that it was actually a bit of the subtle humor engineers and geeks are so fond of. The fact that we&#8217;ve taken it at face value and treated it as though it were actually true is <em>our</em> fault, not Brian Kernighan&#8217;s.</p>

<p>Now, the actual quote (according to <a href="http://en.wikiquote.org/wiki/Brian_Kernighan">wikiquote</a>) seems to be from Elements of Programming Style, and goes:</p>

<blockquote><p>&#8220;Everyone knows that debugging is twice as hard as writing a program in the first place. So if you&#8217;re as clever as you can be when you write it, how will you ever debug it?&#8221;</p></blockquote>

<p>This still has that logical leap embedded in it (&#8221;<em>Everyone knows</em> that debugging is twice as hard&#8221;, etc.), but it does have a good, valid point, <em>depending on how you define &#8220;as clever as you can be&#8221;</em>. (If <em>being clever</em> is actually <em>being smart</em>, then &#8220;as clever as you can be&#8221; would be to only write code which you are capable of debugging&#8230; but I digress.)</p>

<p>What I think this really is <em>intended</em> to mean is: if you write code <em>that you do not completely understand</em>, you will (potentially) introduce bugs <em>which you are not capable of identifying or resolving</em>.</p>

<p>The key is code that <em>you don&#8217;t understand</em>. The reason you won&#8217;t be able to find the bugs is that you don&#8217;t understand what your code is doing in the first place. If that&#8217;s true, then yes, of course you have written un-debuggable software (for <em>you</em>, at least; someone who understands what you wrote can certainly find your bugs). The other side of this coin is that, if you take the time and effort to understand the code that you wrote, you <em>can</em> find the bugs. And you can remove them.</p>

<p>This is called <em>programming</em>. You&#8217;ve probably been doing it for a long time. The fact that we&#8217;re still creating and fixing bugs only means that we haven&#8217;t finished learning to do it yet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Current Desktop]]></title>
    <link href="http://philcrissman.com/2011/03/10/current-desktop/"/>
    <updated>2011-03-10T00:00:00-06:00</updated>
    <id>http://philcrissman.com/2011/03/10/current-desktop</id>
    <content type="html"><![CDATA[<p><a href="http://philcrissman.com/images/posts/theDesktop3-10-11.png"><img src="http://philcrissman.com/images/posts/theDesktop3-10-11-sm.png" width="440" /></a></p>

<p>I&#8217;m a sucker for a nice desktop. Currently using <a href="http://mutablecode.com/apps/nerdtool">NerdTool</a> (thanks, <a href="http://www.leancrew.com/all-this/">drdrang</a> and <a href="http://brettterpstra.com/">Brett Terpstra</a>) and <a href="http://wallsaverapp.com/">WallSaver</a>.</p>

<p>UPDATE:</p>

<p>Forgot to detail, just for the sake of completeness, the items in the menubar. From left to right, we have:</p>

<p><a href="http://peepcode.com/products/peepopen">PeepOpen</a>: Great plugin for TextMate, MacVim, Emacs, Aquamacs, Coda or XCode for finding files. It&#8217;s really good. One of my favorite features is that it automatically orders by the date you late modified something; so if you look in a rails app for a file named index (of which you probably have dozens), the first one listed will be the last one you edited, which is often exactly the one I want.</p>

<p><a href="https://www.dropbox.com/">Dropbox</a>: Files, online. Wait, am I supposed to say &#8220;in the cloud&#8221; now? Anyway. The truth is out there.</p>

<p><a href="http://toolbar.google.com/gmail-helper/notifier_mac.html">Google Calendar/Mail Notifiers</a>: If you want to be notified of that sort of thing.</p>

<p><a href="http://www.alfredapp.com/">Alfred</a>: Instead of Spotlight. It has a few extra features (empty your trash bin with a few keystrokes), I find I like it a lot.</p>

<p><a href="http://evernote.com/">Evernote</a>: I&#8217;m still not sold on this app, but I&#8217;m giving it a try.</p>

<p><a href="http://stereopsis.com/flux/">Flux</a>: You&#8217;ll just have to read the description on the site&#8230;</p>

<p><a href="http://littleipsum.com/">Littleipsum</a>: Lorem ipsum text generator. I wish the UI was better, but it&#8217;s ok.</p>

<p><a href="http://www.lightheadsw.com/caffeine/">Caffeine</a>: Keeps your mac awake, of course. Nice for presentations.</p>

<p><a href="http://www.ragingmenace.com/software/menumeters/">MenuMeters</a>: So you don&#8217;t <em>need</em> to keep activity monitor open all the time. I mean, you will anyways, but you don&#8217;t <em>need</em> to.</p>

<p>The rest are just standard Mac OS stuff: Spaces, Displays, TimeMachine(not used, using <a href="http://www.crashplan.com/">Crashplan</a>), Bluetooth, WiFi, Sound, Keyboard-switcher (for when I switch back to Dvorak&#8230; eventually), Battery, Date, Spotlight, phew.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test First As A Productivity Hack]]></title>
    <link href="http://philcrissman.com/2011/02/21/test-first-as-a-productivity-hack/"/>
    <updated>2011-02-21T00:00:00-06:00</updated>
    <id>http://philcrissman.com/2011/02/21/test-first-as-a-productivity-hack</id>
    <content type="html"><![CDATA[<p><a href="http://philcrissman.com/images/posts/focus.jpg"><img src="http://philcrissman.com/images/posts/focus.jpg" width="440" /></a></p>

<p>If you&#8217;re like me, and live primarily online, you have countless distractions in the form of blogs, news sites, photo sites, chat applications, twitter/facebook, web comics, etc. It&#8217;s really easy to sit down at your computer, and if you&#8217;re not focused, simply call up <a href="http://thisisnthappiness.com">TIH</a> or <a href="http://news.ycombinator.com">HN</a> or <a href="http://bestofwikipedia.tumblr.com">bestofwikipedia</a> and soon find the first hour of your day has been completely sucked up just <em>looking at stuff</em>.</p>

<p>Well, if you&#8217;re a contractor or freelancer, that may not be how you wanted to spend the first hour of your day. You just lost an hour of billable time; do that every day and you&#8217;re cheating yourself out of a lot of hours, especially if (guilty look) you&#8217;re prone to a similar web-surfing session after returning from lunch.</p>

<p>Something I&#8217;ve started doing, that I&#8217;ve found to be a great help in avoiding losing focus like this, is to sit down and make the <em>my very first task</em> to be writing a test for the app that I&#8217;m currently working on.</p>

<p>So, in this context, I&#8217;m not talking about &#8220;test first&#8221; in the TDD (Test Driven Development) sense, although I do practice that. I mean &#8220;test first&#8221; literally, as, <em>when my seat hits the chair, and my fingers touch the keyboard, write a test</em>.</p>

<p>This accomplishes a few different things.</p>

<ol>
<li>An immediate thing to focus on. Part of the reason I get distracted by the web is that I may not have an <em>immediate</em> action to start on. Having an immediate, easy to start, first action makes a world of difference.</li>
<li>It gets me in the &#8220;work&#8221; mindset and flow. It doesn&#8217;t matter what the test is. It might be as simple as a throw-away &#8220;when I go to this page, I should see the correct page title&#8221; test &#8211; the point isn&#8217;t that this test <em>needs</em> to be written for the health of the application&#8217;s test suite; it&#8217;s simply a hack to get you into work-mode. Once I look at the code, add a test, make sure it runs, by then I&#8217;ve only spent about 2-4 minutes, but I&#8217;ve avoided getting side-tracked, and I&#8217;m already into the codebase, so it&#8217;s very natural to look at what needs to be done next, and start doing it.</li>
<li>Hey, if I choose wisely, some of this uber-simple tests I&#8217;m adding as a first action may actually be useful. If a test is <em>truly</em> trivial, you probably just want to delete it; but chances are you can find <em>something</em> simple to test that actually does need to be true in the finished app; all the better. You <em>have</em> actually improved your test suite, while simultaneously avoiding that &#8220;morning distraction&#8221; time, and getting yourself into the flow of <em>getting things done</em>.</li>
</ol>


<p>Your mileage may vary. But it&#8217;s been working for me. Adding something like the <a href="http://www.pomodorotechnique.com/">Pomodoro technique</a> to this means that I&#8217;ll still get a chance to catch up on my blogs/etc during the day, but without the trap of spending my first hour surfing mindlessly.</p>

<p>What are your &#8220;get back to work&#8221; hacks?</p>

<p><span style="font-size: 0.8em; color: #666;">
Photo credit: <a href="http://www.flickr.com/photos/ihtatho/627226315/sizes/m/in/photostream/">flickr</a>
</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UJS in Rails 3 Slides]]></title>
    <link href="http://philcrissman.com/2011/02/01/ujs-in-rails-3-slides/"/>
    <updated>2011-02-01T00:00:00-06:00</updated>
    <id>http://philcrissman.com/2011/02/01/ujs-in-rails-3-slides</id>
    <content type="html"><![CDATA[<p>So, here&#8217;s those slides from the other night.</p>

<div style="width:425px" id="__ss_6775992"><strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/philcrissman/ujs-in-rails-3-6775992" title="UJS in Rails 3">UJS in Rails 3</a></strong><object id="__sse6775992" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=ujs-110201093325-phpapp02&stripped_title=ujs-in-rails-3-6775992&userName=philcrissman" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed name="__sse6775992" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=ujs-110201093325-phpapp02&stripped_title=ujs-in-rails-3-6775992&userName=philcrissman" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed></object><div style="padding:5px 0 12px">View more <a href="http://www.slideshare.net/">presentations</a> from <a href="http://www.slideshare.net/philcrissman">philcrissman</a>.</div></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UJS in Rails 3 tonight at RUM]]></title>
    <link href="http://philcrissman.com/2011/01/31/ujs-in-rails-3-tonight-at-rum/"/>
    <updated>2011-01-31T00:00:00-06:00</updated>
    <id>http://philcrissman.com/2011/01/31/ujs-in-rails-3-tonight-at-rum</id>
    <content type="html"><![CDATA[<p>UJS in Rails 3, tonight at RUM</p>

<p>I&#8217;ll be speaking tonight on UJS and Rails 3 at <a href="http://ruby.mn/">RUM</a>. Slides will be posted somewhere later this week, and I may follow up with a post that summarizes the content, if the slides don&#8217;t seem complete enough to cover the topic on their own.</p>
]]></content>
  </entry>
  
</feed>
